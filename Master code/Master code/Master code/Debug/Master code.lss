
Master code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000142c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022a  00800060  0000142c  000014c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080028a  0080028a  000016ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003319  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d82  00000000  00000000  00004c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a58  00000000  00000000  000059fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00007454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000823  00000000  00000000  00007800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002137  00000000  00000000  00008023  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000a15a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	e6 06       	cpc	r14, r22
      56:	3a 07       	cpc	r19, r26
      58:	ba 07       	cpc	r27, r26
      5a:	c0 07       	cpc	r28, r16
      5c:	c6 07       	cpc	r28, r22
      5e:	cc 07       	cpc	r28, r28
      60:	d6 07       	cpc	r29, r22
      62:	7c 07       	cpc	r23, r28
      64:	dc 07       	cpc	r29, r28
      66:	e1 06       	cpc	r14, r17

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	ec e2       	ldi	r30, 0x2C	; 44
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 38       	cpi	r26, 0x8A	; 138
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa e8       	ldi	r26, 0x8A	; 138
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 38       	cpi	r26, 0x8D	; 141
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c5 03 	call	0x78a	; 0x78a <main>
      9e:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_vsetPINDir>:
		break ;
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
		break ;
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
      a6:	82 34       	cpi	r24, 0x42	; 66
      a8:	19 f1       	breq	.+70     	; 0xf0 <DIO_vsetPINDir+0x4a>
      aa:	18 f4       	brcc	.+6      	; 0xb2 <DIO_vsetPINDir+0xc>
      ac:	81 34       	cpi	r24, 0x41	; 65
      ae:	39 f0       	breq	.+14     	; 0xbe <DIO_vsetPINDir+0x18>
      b0:	08 95       	ret
      b2:	83 34       	cpi	r24, 0x43	; 67
      b4:	b1 f1       	breq	.+108    	; 0x122 <DIO_vsetPINDir+0x7c>
      b6:	84 34       	cpi	r24, 0x44	; 68
      b8:	09 f4       	brne	.+2      	; 0xbc <DIO_vsetPINDir+0x16>
      ba:	4c c0       	rjmp	.+152    	; 0x154 <DIO_vsetPINDir+0xae>
      bc:	08 95       	ret
      be:	41 30       	cpi	r20, 0x01	; 1
      c0:	59 f4       	brne	.+22     	; 0xd8 <DIO_vsetPINDir+0x32>
      c2:	2a b3       	in	r18, 0x1a	; 26
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_vsetPINDir+0x28>
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	6a 95       	dec	r22
      d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_vsetPINDir+0x24>
      d2:	82 2b       	or	r24, r18
      d4:	8a bb       	out	0x1a, r24	; 26
      d6:	08 95       	ret
      d8:	2a b3       	in	r18, 0x1a	; 26
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_vsetPINDir+0x3e>
      e0:	88 0f       	add	r24, r24
      e2:	99 1f       	adc	r25, r25
      e4:	6a 95       	dec	r22
      e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_vsetPINDir+0x3a>
      e8:	80 95       	com	r24
      ea:	82 23       	and	r24, r18
      ec:	8a bb       	out	0x1a, r24	; 26
      ee:	08 95       	ret
      f0:	41 30       	cpi	r20, 0x01	; 1
      f2:	59 f4       	brne	.+22     	; 0x10a <DIO_vsetPINDir+0x64>
      f4:	27 b3       	in	r18, 0x17	; 23
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_vsetPINDir+0x5a>
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	6a 95       	dec	r22
     102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_vsetPINDir+0x56>
     104:	82 2b       	or	r24, r18
     106:	87 bb       	out	0x17, r24	; 23
     108:	08 95       	ret
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x70>
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	6a 95       	dec	r22
     118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x6c>
     11a:	80 95       	com	r24
     11c:	82 23       	and	r24, r18
     11e:	87 bb       	out	0x17, r24	; 23
     120:	08 95       	ret
     122:	41 30       	cpi	r20, 0x01	; 1
     124:	59 f4       	brne	.+22     	; 0x13c <DIO_vsetPINDir+0x96>
     126:	24 b3       	in	r18, 0x14	; 20
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vsetPINDir+0x8c>
     12e:	88 0f       	add	r24, r24
     130:	99 1f       	adc	r25, r25
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vsetPINDir+0x88>
     136:	82 2b       	or	r24, r18
     138:	84 bb       	out	0x14, r24	; 20
     13a:	08 95       	ret
     13c:	24 b3       	in	r18, 0x14	; 20
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_vsetPINDir+0xa2>
     144:	88 0f       	add	r24, r24
     146:	99 1f       	adc	r25, r25
     148:	6a 95       	dec	r22
     14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_vsetPINDir+0x9e>
     14c:	80 95       	com	r24
     14e:	82 23       	and	r24, r18
     150:	84 bb       	out	0x14, r24	; 20
     152:	08 95       	ret
     154:	41 30       	cpi	r20, 0x01	; 1
     156:	59 f4       	brne	.+22     	; 0x16e <DIO_vsetPINDir+0xc8>
     158:	21 b3       	in	r18, 0x11	; 17
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_vsetPINDir+0xbe>
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	6a 95       	dec	r22
     166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_vsetPINDir+0xba>
     168:	82 2b       	or	r24, r18
     16a:	81 bb       	out	0x11, r24	; 17
     16c:	08 95       	ret
     16e:	21 b3       	in	r18, 0x11	; 17
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_vsetPINDir+0xd4>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	6a 95       	dec	r22
     17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_vsetPINDir+0xd0>
     17e:	80 95       	com	r24
     180:	82 23       	and	r24, r18
     182:	81 bb       	out	0x11, r24	; 17
     184:	08 95       	ret

00000186 <DIO_write>:
     186:	82 34       	cpi	r24, 0x42	; 66
     188:	19 f1       	breq	.+70     	; 0x1d0 <DIO_write+0x4a>
     18a:	18 f4       	brcc	.+6      	; 0x192 <DIO_write+0xc>
     18c:	81 34       	cpi	r24, 0x41	; 65
     18e:	39 f0       	breq	.+14     	; 0x19e <DIO_write+0x18>
     190:	08 95       	ret
     192:	83 34       	cpi	r24, 0x43	; 67
     194:	b1 f1       	breq	.+108    	; 0x202 <DIO_write+0x7c>
     196:	84 34       	cpi	r24, 0x44	; 68
     198:	09 f4       	brne	.+2      	; 0x19c <DIO_write+0x16>
     19a:	4c c0       	rjmp	.+152    	; 0x234 <DIO_write+0xae>
     19c:	08 95       	ret
     19e:	41 30       	cpi	r20, 0x01	; 1
     1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_write+0x32>
     1a2:	2b b3       	in	r18, 0x1b	; 27
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_write+0x28>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	6a 95       	dec	r22
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_write+0x24>
     1b2:	82 2b       	or	r24, r18
     1b4:	8b bb       	out	0x1b, r24	; 27
     1b6:	08 95       	ret
     1b8:	2b b3       	in	r18, 0x1b	; 27
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_write+0x3e>
     1c0:	88 0f       	add	r24, r24
     1c2:	99 1f       	adc	r25, r25
     1c4:	6a 95       	dec	r22
     1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_write+0x3a>
     1c8:	80 95       	com	r24
     1ca:	82 23       	and	r24, r18
     1cc:	8b bb       	out	0x1b, r24	; 27
     1ce:	08 95       	ret
     1d0:	41 30       	cpi	r20, 0x01	; 1
     1d2:	59 f4       	brne	.+22     	; 0x1ea <DIO_write+0x64>
     1d4:	28 b3       	in	r18, 0x18	; 24
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_write+0x5a>
     1dc:	88 0f       	add	r24, r24
     1de:	99 1f       	adc	r25, r25
     1e0:	6a 95       	dec	r22
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_write+0x56>
     1e4:	82 2b       	or	r24, r18
     1e6:	88 bb       	out	0x18, r24	; 24
     1e8:	08 95       	ret
     1ea:	28 b3       	in	r18, 0x18	; 24
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_write+0x70>
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	6a 95       	dec	r22
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_write+0x6c>
     1fa:	80 95       	com	r24
     1fc:	82 23       	and	r24, r18
     1fe:	88 bb       	out	0x18, r24	; 24
     200:	08 95       	ret
     202:	41 30       	cpi	r20, 0x01	; 1
     204:	59 f4       	brne	.+22     	; 0x21c <DIO_write+0x96>
     206:	25 b3       	in	r18, 0x15	; 21
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_write+0x8c>
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	6a 95       	dec	r22
     214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_write+0x88>
     216:	82 2b       	or	r24, r18
     218:	85 bb       	out	0x15, r24	; 21
     21a:	08 95       	ret
     21c:	25 b3       	in	r18, 0x15	; 21
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_write+0xa2>
     224:	88 0f       	add	r24, r24
     226:	99 1f       	adc	r25, r25
     228:	6a 95       	dec	r22
     22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_write+0x9e>
     22c:	80 95       	com	r24
     22e:	82 23       	and	r24, r18
     230:	85 bb       	out	0x15, r24	; 21
     232:	08 95       	ret
     234:	41 30       	cpi	r20, 0x01	; 1
     236:	59 f4       	brne	.+22     	; 0x24e <DIO_write+0xc8>
     238:	22 b3       	in	r18, 0x12	; 18
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_write+0xbe>
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	6a 95       	dec	r22
     246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_write+0xba>
     248:	82 2b       	or	r24, r18
     24a:	82 bb       	out	0x12, r24	; 18
     24c:	08 95       	ret
     24e:	22 b3       	in	r18, 0x12	; 18
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write+0xd4>
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	6a 95       	dec	r22
     25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write+0xd0>
     25e:	80 95       	com	r24
     260:	82 23       	and	r24, r18
     262:	82 bb       	out	0x12, r24	; 18
     264:	08 95       	ret

00000266 <DIO_u8read>:
     266:	82 34       	cpi	r24, 0x42	; 66
     268:	d9 f0       	breq	.+54     	; 0x2a0 <DIO_u8read+0x3a>
     26a:	18 f4       	brcc	.+6      	; 0x272 <DIO_u8read+0xc>
     26c:	81 34       	cpi	r24, 0x41	; 65
     26e:	31 f0       	breq	.+12     	; 0x27c <DIO_u8read+0x16>
     270:	4d c0       	rjmp	.+154    	; 0x30c <DIO_u8read+0xa6>
     272:	83 34       	cpi	r24, 0x43	; 67
     274:	39 f1       	breq	.+78     	; 0x2c4 <DIO_u8read+0x5e>
     276:	84 34       	cpi	r24, 0x44	; 68
     278:	b9 f1       	breq	.+110    	; 0x2e8 <DIO_u8read+0x82>
     27a:	48 c0       	rjmp	.+144    	; 0x30c <DIO_u8read+0xa6>
     27c:	29 b3       	in	r18, 0x19	; 25
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	06 2e       	mov	r0, r22
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_u8read+0x24>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_u8read+0x20>
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	82 23       	and	r24, r18
     292:	93 23       	and	r25, r19
     294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_u8read+0x34>
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	6a 95       	dec	r22
     29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_u8read+0x30>
     29e:	08 95       	ret
     2a0:	26 b3       	in	r18, 0x16	; 22
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	06 2e       	mov	r0, r22
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_u8read+0x48>
     2aa:	88 0f       	add	r24, r24
     2ac:	99 1f       	adc	r25, r25
     2ae:	0a 94       	dec	r0
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_u8read+0x44>
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	82 23       	and	r24, r18
     2b6:	93 23       	and	r25, r19
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_u8read+0x58>
     2ba:	95 95       	asr	r25
     2bc:	87 95       	ror	r24
     2be:	6a 95       	dec	r22
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_u8read+0x54>
     2c2:	08 95       	ret
     2c4:	23 b3       	in	r18, 0x13	; 19
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	06 2e       	mov	r0, r22
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_u8read+0x6c>
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	0a 94       	dec	r0
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_u8read+0x68>
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	82 23       	and	r24, r18
     2da:	93 23       	and	r25, r19
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_u8read+0x7c>
     2de:	95 95       	asr	r25
     2e0:	87 95       	ror	r24
     2e2:	6a 95       	dec	r22
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_u8read+0x78>
     2e6:	08 95       	ret
     2e8:	20 b3       	in	r18, 0x10	; 16
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	06 2e       	mov	r0, r22
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_u8read+0x90>
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	0a 94       	dec	r0
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_u8read+0x8c>
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	82 23       	and	r24, r18
     2fe:	93 23       	and	r25, r19
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_u8read+0xa0>
     302:	95 95       	asr	r25
     304:	87 95       	ror	r24
     306:	6a 95       	dec	r22
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_u8read+0x9c>
     30a:	08 95       	ret
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret

00000310 <DIO_write_port>:
     310:	82 34       	cpi	r24, 0x42	; 66
     312:	59 f0       	breq	.+22     	; 0x32a <DIO_write_port+0x1a>
     314:	18 f4       	brcc	.+6      	; 0x31c <DIO_write_port+0xc>
     316:	81 34       	cpi	r24, 0x41	; 65
     318:	31 f0       	breq	.+12     	; 0x326 <DIO_write_port+0x16>
     31a:	08 95       	ret
     31c:	83 34       	cpi	r24, 0x43	; 67
     31e:	39 f0       	breq	.+14     	; 0x32e <DIO_write_port+0x1e>
     320:	84 34       	cpi	r24, 0x44	; 68
     322:	39 f0       	breq	.+14     	; 0x332 <DIO_write_port+0x22>
     324:	08 95       	ret
     326:	6b bb       	out	0x1b, r22	; 27
     328:	08 95       	ret
     32a:	68 bb       	out	0x18, r22	; 24
     32c:	08 95       	ret
     32e:	65 bb       	out	0x15, r22	; 21
     330:	08 95       	ret
     332:	62 bb       	out	0x12, r22	; 18
     334:	08 95       	ret

00000336 <DIO_vconnectpullup>:
	}
}

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
	switch(portname)
     336:	82 34       	cpi	r24, 0x42	; 66
     338:	61 f1       	breq	.+88     	; 0x392 <DIO_vconnectpullup+0x5c>
     33a:	18 f4       	brcc	.+6      	; 0x342 <DIO_vconnectpullup+0xc>
     33c:	81 34       	cpi	r24, 0x41	; 65
     33e:	41 f0       	breq	.+16     	; 0x350 <DIO_vconnectpullup+0x1a>
     340:	08 95       	ret
     342:	83 34       	cpi	r24, 0x43	; 67
     344:	09 f4       	brne	.+2      	; 0x348 <DIO_vconnectpullup+0x12>
     346:	46 c0       	rjmp	.+140    	; 0x3d4 <DIO_vconnectpullup+0x9e>
     348:	84 34       	cpi	r24, 0x44	; 68
     34a:	09 f4       	brne	.+2      	; 0x34e <DIO_vconnectpullup+0x18>
     34c:	64 c0       	rjmp	.+200    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     34e:	08 95       	ret
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
     350:	41 30       	cpi	r20, 0x01	; 1
     352:	99 f4       	brne	.+38     	; 0x37a <DIO_vconnectpullup+0x44>
		{
			CLR_BIT(SFIOR,PUD);
     354:	80 b7       	in	r24, 0x30	; 48
     356:	8b 7f       	andi	r24, 0xFB	; 251
     358:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRA,pinnumber);
     35a:	2a b3       	in	r18, 0x1a	; 26
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_vconnectpullup+0x30>
     362:	88 0f       	add	r24, r24
     364:	99 1f       	adc	r25, r25
     366:	6a 95       	dec	r22
     368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_vconnectpullup+0x2c>
     36a:	98 2f       	mov	r25, r24
     36c:	90 95       	com	r25
     36e:	92 23       	and	r25, r18
     370:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pinnumber);
     372:	9b b3       	in	r25, 0x1b	; 27
     374:	89 2b       	or	r24, r25
     376:	8b bb       	out	0x1b, r24	; 27
     378:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     37a:	2b b3       	in	r18, 0x1b	; 27
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_vconnectpullup+0x50>
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	6a 95       	dec	r22
     388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_vconnectpullup+0x4c>
     38a:	80 95       	com	r24
     38c:	82 23       	and	r24, r18
     38e:	8b bb       	out	0x1b, r24	; 27
     390:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
     392:	41 30       	cpi	r20, 0x01	; 1
     394:	99 f4       	brne	.+38     	; 0x3bc <DIO_vconnectpullup+0x86>
		{
			CLR_BIT(SFIOR,PUD);
     396:	80 b7       	in	r24, 0x30	; 48
     398:	8b 7f       	andi	r24, 0xFB	; 251
     39a:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRB,pinnumber);
     39c:	27 b3       	in	r18, 0x17	; 23
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_vconnectpullup+0x72>
     3a4:	88 0f       	add	r24, r24
     3a6:	99 1f       	adc	r25, r25
     3a8:	6a 95       	dec	r22
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_vconnectpullup+0x6e>
     3ac:	98 2f       	mov	r25, r24
     3ae:	90 95       	com	r25
     3b0:	92 23       	and	r25, r18
     3b2:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pinnumber);
     3b4:	98 b3       	in	r25, 0x18	; 24
     3b6:	89 2b       	or	r24, r25
     3b8:	88 bb       	out	0x18, r24	; 24
     3ba:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     3bc:	28 b3       	in	r18, 0x18	; 24
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_vconnectpullup+0x92>
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	6a 95       	dec	r22
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_vconnectpullup+0x8e>
     3cc:	80 95       	com	r24
     3ce:	82 23       	and	r24, r18
     3d0:	88 bb       	out	0x18, r24	; 24
     3d2:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
     3d4:	41 30       	cpi	r20, 0x01	; 1
     3d6:	99 f4       	brne	.+38     	; 0x3fe <DIO_vconnectpullup+0xc8>
		{
			CLR_BIT(SFIOR,PUD);
     3d8:	80 b7       	in	r24, 0x30	; 48
     3da:	8b 7f       	andi	r24, 0xFB	; 251
     3dc:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRC,pinnumber);
     3de:	24 b3       	in	r18, 0x14	; 20
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_vconnectpullup+0xb4>
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	6a 95       	dec	r22
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_vconnectpullup+0xb0>
     3ee:	98 2f       	mov	r25, r24
     3f0:	90 95       	com	r25
     3f2:	92 23       	and	r25, r18
     3f4:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pinnumber);
     3f6:	95 b3       	in	r25, 0x15	; 21
     3f8:	89 2b       	or	r24, r25
     3fa:	85 bb       	out	0x15, r24	; 21
     3fc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     3fe:	25 b3       	in	r18, 0x15	; 21
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	6a 95       	dec	r22
     40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     40e:	80 95       	com	r24
     410:	82 23       	and	r24, r18
     412:	85 bb       	out	0x15, r24	; 21
     414:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
     416:	41 30       	cpi	r20, 0x01	; 1
     418:	99 f4       	brne	.+38     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		{
			CLR_BIT(SFIOR,PUD);
     41a:	80 b7       	in	r24, 0x30	; 48
     41c:	8b 7f       	andi	r24, 0xFB	; 251
     41e:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRD,pinnumber);
     420:	21 b3       	in	r18, 0x11	; 17
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	6a 95       	dec	r22
     42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     430:	98 2f       	mov	r25, r24
     432:	90 95       	com	r25
     434:	92 23       	and	r25, r18
     436:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pinnumber);
     438:	92 b3       	in	r25, 0x12	; 18
     43a:	89 2b       	or	r24, r25
     43c:	82 bb       	out	0x12, r24	; 18
     43e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     440:	22 b3       	in	r18, 0x12	; 18
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	6a 95       	dec	r22
     44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     450:	80 95       	com	r24
     452:	82 23       	and	r24, r18
     454:	82 bb       	out	0x12, r24	; 18
     456:	08 95       	ret

00000458 <EEPROM_ui8ReadByteFromAddress>:
#include <avr/io.h>

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     458:	e1 99       	sbic	0x1c, 1	; 28
     45a:	fe cf       	rjmp	.-4      	; 0x458 <EEPROM_ui8ReadByteFromAddress>
	;
	/* Set up address register */
	EEAR = u16Address;
     45c:	9f bb       	out	0x1f, r25	; 31
     45e:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     460:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     462:	8d b3       	in	r24, 0x1d	; 29
}
     464:	08 95       	ret

00000466 <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     466:	e1 99       	sbic	0x1c, 1	; 28
     468:	fe cf       	rjmp	.-4      	; 0x466 <EEPROM_vReadBlockFromAddress>
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     46a:	41 15       	cp	r20, r1
     46c:	51 05       	cpc	r21, r1
     46e:	91 f0       	breq	.+36     	; 0x494 <EEPROM_vReadBlockFromAddress+0x2e>
     470:	46 0f       	add	r20, r22
     472:	57 1f       	adc	r21, r23
     474:	fb 01       	movw	r30, r22
     476:	9c 01       	movw	r18, r24
     478:	26 1b       	sub	r18, r22
     47a:	37 0b       	sbc	r19, r23
     47c:	b9 01       	movw	r22, r18
     47e:	9b 01       	movw	r18, r22
     480:	2e 0f       	add	r18, r30
     482:	3f 1f       	adc	r19, r31
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
     484:	3f bb       	out	0x1f, r19	; 31
     486:	2e bb       	out	0x1e, r18	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     488:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     48a:	9d b3       	in	r25, 0x1d	; 29
     48c:	91 93       	st	Z+, r25
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     48e:	e4 17       	cp	r30, r20
     490:	f5 07       	cpc	r31, r21
     492:	a9 f7       	brne	.-22     	; 0x47e <EEPROM_vReadBlockFromAddress+0x18>
     494:	08 95       	ret

00000496 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     496:	e1 99       	sbic	0x1c, 1	; 28
     498:	fe cf       	rjmp	.-4      	; 0x496 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     49a:	9f bb       	out	0x1f, r25	; 31
     49c:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     49e:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     4a0:	8d b3       	in	r24, 0x1d	; 29
     4a2:	86 17       	cp	r24, r22
     4a4:	19 f0       	breq	.+6      	; 0x4ac <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     4a6:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     4a8:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     4aa:	e1 9a       	sbi	0x1c, 1	; 28
     4ac:	08 95       	ret

000004ae <EEPROM_vWriteBlockToAddress>:
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
     4ae:	41 15       	cp	r20, r1
     4b0:	51 05       	cpc	r21, r1
     4b2:	c9 f0       	breq	.+50     	; 0x4e6 <EEPROM_vWriteBlockToAddress+0x38>
     4b4:	46 0f       	add	r20, r22
     4b6:	57 1f       	adc	r21, r23
     4b8:	fb 01       	movw	r30, r22
     4ba:	9c 01       	movw	r18, r24
     4bc:	26 1b       	sub	r18, r22
     4be:	37 0b       	sbc	r19, r23
     4c0:	b9 01       	movw	r22, r18
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     4c2:	e1 99       	sbic	0x1c, 1	; 28
     4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <EEPROM_vWriteBlockToAddress+0x14>
     4c6:	9b 01       	movw	r18, r22
     4c8:	2e 0f       	add	r18, r30
     4ca:	3f 1f       	adc	r19, r31
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     4cc:	3f bb       	out	0x1f, r19	; 31
     4ce:	2e bb       	out	0x1e, r18	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     4d0:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     4d2:	2d b3       	in	r18, 0x1d	; 29
     4d4:	91 91       	ld	r25, Z+
     4d6:	29 17       	cp	r18, r25
     4d8:	19 f0       	breq	.+6      	; 0x4e0 <EEPROM_vWriteBlockToAddress+0x32>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     4da:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     4dc:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     4de:	e1 9a       	sbi	0x1c, 1	; 28
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
     4e0:	e4 17       	cp	r30, r20
     4e2:	f5 07       	cpc	r31, r21
     4e4:	71 f7       	brne	.-36     	; 0x4c2 <EEPROM_vWriteBlockToAddress+0x14>
     4e6:	08 95       	ret

000004e8 <keypad_vInit>:

#include "keypad_driver.h"
void keypad_vInit(void)
{
	/* Initialize first four bits in keypad as output pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	84 e4       	ldi	r24, 0x44	; 68
     4ee:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
     4f2:	41 e0       	ldi	r20, 0x01	; 1
     4f4:	61 e0       	ldi	r22, 0x01	; 1
     4f6:	84 e4       	ldi	r24, 0x44	; 68
     4f8:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	84 e4       	ldi	r24, 0x44	; 68
     502:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	63 e0       	ldi	r22, 0x03	; 3
     50a:	84 e4       	ldi	r24, 0x44	; 68
     50c:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	/******************************************************/
	/* initalize second four bits in keypad as input pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIFTH_PIN,0);
     510:	40 e0       	ldi	r20, 0x00	; 0
     512:	64 e0       	ldi	r22, 0x04	; 4
     514:	84 e4       	ldi	r24, 0x44	; 68
     516:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SIXTH_PIN,0);
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	65 e0       	ldi	r22, 0x05	; 5
     51e:	84 e4       	ldi	r24, 0x44	; 68
     520:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,0);
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	66 e0       	ldi	r22, 0x06	; 6
     528:	84 e4       	ldi	r24, 0x44	; 68
     52a:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,0);
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	67 e0       	ldi	r22, 0x07	; 7
     532:	84 e4       	ldi	r24, 0x44	; 68
     534:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	/*****************************************************/
	/*connect pull up resistance to the input pins*/
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_FIFTH_PIN,1);
     538:	41 e0       	ldi	r20, 0x01	; 1
     53a:	64 e0       	ldi	r22, 0x04	; 4
     53c:	84 e4       	ldi	r24, 0x44	; 68
     53e:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SIXTH_PIN,1);
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	65 e0       	ldi	r22, 0x05	; 5
     546:	84 e4       	ldi	r24, 0x44	; 68
     548:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,1);
     54c:	41 e0       	ldi	r20, 0x01	; 1
     54e:	66 e0       	ldi	r22, 0x06	; 6
     550:	84 e4       	ldi	r24, 0x44	; 68
     552:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,1);
     556:	41 e0       	ldi	r20, 0x01	; 1
     558:	67 e0       	ldi	r22, 0x07	; 7
     55a:	84 e4       	ldi	r24, 0x44	; 68
     55c:	0e 94 9b 01 	call	0x336	; 0x336 <DIO_vconnectpullup>
     560:	08 95       	ret

00000562 <keypad_u8check_press>:
	/****************************************************/
}
uint8 keypad_u8check_press(void)
{
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	60 97       	sbiw	r28, 0x10	; 16
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons
     57e:	80 e1       	ldi	r24, 0x10	; 16
     580:	e0 e6       	ldi	r30, 0x60	; 96
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	de 01       	movw	r26, r28
     586:	11 96       	adiw	r26, 0x01	; 1
     588:	01 90       	ld	r0, Z+
     58a:	0d 92       	st	X+, r0
     58c:	8a 95       	dec	r24
     58e:	e1 f7       	brne	.-8      	; 0x588 <keypad_u8check_press+0x26>
     590:	e1 2c       	mov	r14, r1
     592:	f1 2c       	mov	r15, r1
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
     594:	0f ef       	ldi	r16, 0xFF	; 255
	for(row=0;row<4;row++)
	{
		/*stop the work of keypad firstly*/
		DIO_write(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
     596:	41 e0       	ldi	r20, 0x01	; 1
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	84 e4       	ldi	r24, 0x44	; 68
     59c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	84 e4       	ldi	r24, 0x44	; 68
     5a6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
     5aa:	41 e0       	ldi	r20, 0x01	; 1
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	84 e4       	ldi	r24, 0x44	; 68
     5b0:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
     5b4:	41 e0       	ldi	r20, 0x01	; 1
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	84 e4       	ldi	r24, 0x44	; 68
     5ba:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5be:	2f ef       	ldi	r18, 0xFF	; 255
     5c0:	89 ef       	ldi	r24, 0xF9	; 249
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	21 50       	subi	r18, 0x01	; 1
     5c6:	80 40       	sbci	r24, 0x00	; 0
     5c8:	90 40       	sbci	r25, 0x00	; 0
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <keypad_u8check_press+0x62>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <keypad_u8check_press+0x6c>
     5ce:	00 00       	nop
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	6e 2d       	mov	r22, r14
     5d4:	84 e4       	ldi	r24, 0x44	; 68
     5d6:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
		
		for(coloumn=0;coloumn<4;coloumn++)
     5da:	10 e0       	ldi	r17, 0x00	; 0
		{
			key_pressed_indicator=DIO_u8read(KEYPAD_PORT,(coloumn+4)); // read the input pins of MC which connected to keypad
     5dc:	64 e0       	ldi	r22, 0x04	; 4
     5de:	61 0f       	add	r22, r17
     5e0:	84 e4       	ldi	r24, 0x44	; 68
     5e2:	0e 94 33 01 	call	0x266	; 0x266 <DIO_u8read>
			if(key_pressed_indicator==0)// will be 0 only if any key pressed
     5e6:	81 11       	cpse	r24, r1
     5e8:	0f c0       	rjmp	.+30     	; 0x608 <keypad_u8check_press+0xa6>
			{
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
     5ea:	f7 01       	movw	r30, r14
     5ec:	ee 0f       	add	r30, r30
     5ee:	ff 1f       	adc	r31, r31
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	8c 0f       	add	r24, r28
     5fa:	9d 1f       	adc	r25, r29
     5fc:	e8 0f       	add	r30, r24
     5fe:	f9 1f       	adc	r31, r25
     600:	e1 0f       	add	r30, r17
     602:	f1 1d       	adc	r31, r1
     604:	00 81       	ld	r16, Z
				break; // break from the loop
     606:	03 c0       	rjmp	.+6      	; 0x60e <keypad_u8check_press+0xac>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
		
		for(coloumn=0;coloumn<4;coloumn++)
     608:	1f 5f       	subi	r17, 0xFF	; 255
     60a:	14 30       	cpi	r17, 0x04	; 4
     60c:	39 f7       	brne	.-50     	; 0x5dc <keypad_u8check_press+0x7a>
     60e:	9f ef       	ldi	r25, 0xFF	; 255
     610:	e9 1a       	sub	r14, r25
     612:	f9 0a       	sbc	r15, r25
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
	for(row=0;row<4;row++)
     614:	24 e0       	ldi	r18, 0x04	; 4
     616:	e2 16       	cp	r14, r18
     618:	f1 04       	cpc	r15, r1
     61a:	09 f0       	breq	.+2      	; 0x61e <keypad_u8check_press+0xbc>
     61c:	bc cf       	rjmp	.-136    	; 0x596 <keypad_u8check_press+0x34>
				break; // break from the loop
			}
		}
	}
	return returnval ; //return the pressed key in case of key pressed or return 0xff in case of no key pressed
     61e:	80 2f       	mov	r24, r16
     620:	60 96       	adiw	r28, 0x10	; 16
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	08 95       	ret

0000063a <send_falling_edge>:


static void send_falling_edge(void)
{
	/* to enable printing the sent character to LCD ,we should send send falling edge to the lcd*/ 
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,1); // set enable pin to one
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	82 e4       	ldi	r24, 0x42	; 66
     640:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     644:	8f e3       	ldi	r24, 0x3F	; 63
     646:	9f e1       	ldi	r25, 0x1F	; 31
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <send_falling_edge+0xe>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <send_falling_edge+0x14>
     64e:	00 00       	nop
	_delay_ms(2); //period of high
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,0); // clear enable pin 
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	82 e4       	ldi	r24, 0x42	; 66
     656:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     65a:	8f e3       	ldi	r24, 0x3F	; 63
     65c:	9f e1       	ldi	r25, 0x1F	; 31
     65e:	01 97       	sbiw	r24, 0x01	; 1
     660:	f1 f7       	brne	.-4      	; 0x65e <send_falling_edge+0x24>
     662:	00 c0       	rjmp	.+0      	; 0x664 <send_falling_edge+0x2a>
     664:	00 00       	nop
     666:	08 95       	ret

00000668 <LCD_vSend_cmd>:
	_delay_ms(2); // period of low
}
void LCD_vSend_cmd(uint8 cmd)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,cmd); //send the command to LCD
     668:	68 2f       	mov	r22, r24
     66a:	81 e4       	ldi	r24, 0x41	; 65
     66c:	0e 94 88 01 	call	0x310	; 0x310 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command 
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	61 e0       	ldi	r22, 0x01	; 1
     674:	82 e4       	ldi	r24, 0x42	; 66
     676:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	send_falling_edge(); //send falling edge
     67a:	0e 94 1d 03 	call	0x63a	; 0x63a <send_falling_edge>
     67e:	08 95       	ret

00000680 <LCD_vInit>:

void LCD_vInit(void)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	/* set LCD pins as output pins in case of 8 bit LCD*/
	DIO_vsetPINDir(LCD_PORT,LCD_FIRST_PIN,1);
     680:	41 e0       	ldi	r20, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	81 e4       	ldi	r24, 0x41	; 65
     686:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SECOND_PIN,1);
     68a:	41 e0       	ldi	r20, 0x01	; 1
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	81 e4       	ldi	r24, 0x41	; 65
     690:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_THIRD_PIN,1);
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	62 e0       	ldi	r22, 0x02	; 2
     698:	81 e4       	ldi	r24, 0x41	; 65
     69a:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FOURTH_PIN,1);
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	63 e0       	ldi	r22, 0x03	; 3
     6a2:	81 e4       	ldi	r24, 0x41	; 65
     6a4:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FIFTH_PIN,1);
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	64 e0       	ldi	r22, 0x04	; 4
     6ac:	81 e4       	ldi	r24, 0x41	; 65
     6ae:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SIXTH_PIN,1);
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	65 e0       	ldi	r22, 0x05	; 5
     6b6:	81 e4       	ldi	r24, 0x41	; 65
     6b8:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SEVENTH_PIN,1);
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	66 e0       	ldi	r22, 0x06	; 6
     6c0:	81 e4       	ldi	r24, 0x41	; 65
     6c2:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_EIGHTH_PIN,1);
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	67 e0       	ldi	r22, 0x07	; 7
     6ca:	81 e4       	ldi	r24, 0x41	; 65
     6cc:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	/*****************************/
	/* set LCD control pins as output pins in case of 8 bit LCD */
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_EN_PIN,1);
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	82 e4       	ldi	r24, 0x42	; 66
     6d6:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RW_PIN,1);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	82 e4       	ldi	r24, 0x42	; 66
     6e0:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RS_PIN,1);
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	82 e4       	ldi	r24, 0x42	; 66
     6ea:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
	/*****************************/
	DIO_write(LCD_CONTROL_PORT,LCD_RW_PIN,0); // enable write to LCD 
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	62 e0       	ldi	r22, 0x02	; 2
     6f2:	82 e4       	ldi	r24, 0x42	; 66
     6f4:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	LCD_vSend_cmd(EIGHT_BIT_MODE); //enable 8 bit LCD Mode 
     6f8:	88 e3       	ldi	r24, 0x38	; 56
     6fa:	0e 94 34 03 	call	0x668	; 0x668 <LCD_vSend_cmd>
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen 
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0e 94 34 03 	call	0x668	; 0x668 <LCD_vSend_cmd>
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on 
     704:	8e e0       	ldi	r24, 0x0E	; 14
     706:	0e 94 34 03 	call	0x668	; 0x668 <LCD_vSend_cmd>
     70a:	8f e3       	ldi	r24, 0x3F	; 63
     70c:	9c e9       	ldi	r25, 0x9C	; 156
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <LCD_vInit+0x8e>
     712:	00 c0       	rjmp	.+0      	; 0x714 <LCD_vInit+0x94>
     714:	00 00       	nop
     716:	08 95       	ret

00000718 <LCD_vSend_char>:
	
}
void LCD_vSend_char(uint8 data)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,data); //send the data to LCD
     718:	68 2f       	mov	r22, r24
     71a:	81 e4       	ldi	r24, 0x41	; 65
     71c:	0e 94 88 01 	call	0x310	; 0x310 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	82 e4       	ldi	r24, 0x42	; 66
     726:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
	send_falling_edge(); //send falling edge
     72a:	0e 94 1d 03 	call	0x63a	; 0x63a <send_falling_edge>
     72e:	08 95       	ret

00000730 <LCD_vSend_string>:
	/******************************************/
	#endif
}

void LCD_vSend_string(char *data)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	ec 01       	movw	r28, r24
	while((*data)!=0) //keep in the loop until the end of the string 
     736:	88 81       	ld	r24, Y
     738:	88 23       	and	r24, r24
     73a:	31 f0       	breq	.+12     	; 0x748 <LCD_vSend_string+0x18>
     73c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vSend_char(*data); // print the characters of the string 
     73e:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!=0) //keep in the loop until the end of the string 
     742:	89 91       	ld	r24, Y+
     744:	81 11       	cpse	r24, r1
     746:	fb cf       	rjmp	.-10     	; 0x73e <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data); // print the characters of the string 
		data++; // make the pointer points to the next character
	}
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN); // clear the screen
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 34 03 	call	0x668	; 0x668 <LCD_vSend_cmd>
     754:	08 95       	ret

00000756 <LCD_movecursor>:
	{
		data=0x80;
	}
	/********************************************/
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(row==1)
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	19 f4       	brne	.+6      	; 0x760 <LCD_movecursor+0xa>
	{
		data=0x80+coloumn-1 ;
     75a:	8f e7       	ldi	r24, 0x7F	; 127
     75c:	86 0f       	add	r24, r22
     75e:	06 c0       	rjmp	.+12     	; 0x76c <LCD_movecursor+0x16>
	}
	else if (row==2)
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	19 f4       	brne	.+6      	; 0x76a <LCD_movecursor+0x14>
	{
		data=0xc0+coloumn-1;
     764:	8f eb       	ldi	r24, 0xBF	; 191
     766:	86 0f       	add	r24, r22
     768:	01 c0       	rjmp	.+2      	; 0x76c <LCD_movecursor+0x16>
     76a:	80 e8       	ldi	r24, 0x80	; 128
	}
	/**************************************/
	
	LCD_vSend_cmd(data); //set the position  of the cursor
     76c:	0e 94 34 03 	call	0x668	; 0x668 <LCD_vSend_cmd>
     770:	08 95       	ret

00000772 <LED_vInit>:

#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
     772:	41 e0       	ldi	r20, 0x01	; 1
     774:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_vsetPINDir>
     778:	08 95       	ret

0000077a <LED_vTurnOn>:
}
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     780:	08 95       	ret

00000782 <LED_vTurnOff>:
}
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_write>
     788:	08 95       	ret

0000078a <main>:

volatile uint16 session_counter = 0;//indicate session time
uint8 timeout_flag = FALSE;//stores if the session is still valid or outdated

int main(void)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	28 97       	sbiw	r28, 0x08	; 8
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
	uint8 key_pressed = NOT_PRESSED;//
	/*****************  INITIALIZE  ***********************/
	LED_vInit(ADMIN_LED_PORT,ADMIN_LED_PIN);//initializes the led of admin
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	83 e4       	ldi	r24, 0x43	; 67
     7a2:	0e 94 b9 03 	call	0x772	; 0x772 <LED_vInit>
	LED_vInit(GUEST_LED_PORT,GUEST_LED_PIN);//initializes the led of guest
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	83 e4       	ldi	r24, 0x43	; 67
     7aa:	0e 94 b9 03 	call	0x772	; 0x772 <LED_vInit>
	LED_vInit(BLOCK_LED_PORT,BLOCK_LED_PIN);//initializes the led of block
     7ae:	62 e0       	ldi	r22, 0x02	; 2
     7b0:	83 e4       	ldi	r24, 0x43	; 67
     7b2:	0e 94 b9 03 	call	0x772	; 0x772 <LED_vInit>
	LCD_vInit();//initializes the LCD screen
     7b6:	0e 94 40 03 	call	0x680	; 0x680 <LCD_vInit>
	keypad_vInit();//initializes the keypad
     7ba:	0e 94 74 02 	call	0x4e8	; 0x4e8 <keypad_vInit>
	SPI_vInitMaster();//initializes the communication protocol of SPI
     7be:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <SPI_vInitMaster>
	/******************************************************/
	/* Printing Welcome screen */
	LCD_vSend_string("Welcome to smart");
     7c2:	80 e7       	ldi	r24, 0x70	; 112
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
	LCD_movecursor(2,1);
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
	LCD_vSend_string("home system");
     7d2:	81 e8       	ldi	r24, 0x81	; 129
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     7da:	2f ef       	ldi	r18, 0xFF	; 255
     7dc:	33 ed       	ldi	r19, 0xD3	; 211
     7de:	80 e3       	ldi	r24, 0x30	; 48
     7e0:	21 50       	subi	r18, 0x01	; 1
     7e2:	30 40       	sbci	r19, 0x00	; 0
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	e1 f7       	brne	.-8      	; 0x7e0 <main+0x56>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <main+0x60>
     7ea:	00 00       	nop
	_delay_ms(1000);//Halt the system for the given time in (ms)
	LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7ec:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 2c 02 	call	0x458	; 0x458 <EEPROM_ui8ReadByteFromAddress>
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	39 f4       	brne	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 2c 02 	call	0x458	; 0x458 <EEPROM_ui8ReadByteFromAddress>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	09 f4       	brne	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     808:	ca c0       	rjmp	.+404    	; 0x99e <__stack+0x13f>
	{
		LCD_vSend_string("Login for");//printing login menu
     80a:	8d e8       	ldi	r24, 0x8D	; 141
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
		LCD_movecursor(2,1);//move the cursor to the second line
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
		LCD_vSend_string("first time");
     81a:	87 e9       	ldi	r24, 0x97	; 151
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     822:	9f ef       	ldi	r25, 0xFF	; 255
     824:	e3 ed       	ldi	r30, 0xD3	; 211
     826:	f0 e3       	ldi	r31, 0x30	; 48
     828:	91 50       	subi	r25, 0x01	; 1
     82a:	e0 40       	sbci	r30, 0x00	; 0
     82c:	f0 40       	sbci	r31, 0x00	; 0
     82e:	e1 f7       	brne	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     830:	00 c0       	rjmp	.+0      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     832:	00 00       	nop
		_delay_ms(1000);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     834:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
		LCD_vSend_string("Set Admin pass");//printing the set admin password menu
     838:	82 ea       	ldi	r24, 0xA2	; 162
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
		LCD_movecursor(2,1);
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
		LCD_vSend_string("Admin pass:");
     848:	81 eb       	ldi	r24, 0xB1	; 177
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	8a 83       	std	Y+2, r24	; 0x02
     856:	8b 83       	std	Y+3, r24	; 0x03
     858:	8c 83       	std	Y+4, r24	; 0x04
     85a:	9e 01       	movw	r18, r28
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	79 01       	movw	r14, r18
     862:	69 01       	movw	r12, r18
     864:	1c e0       	ldi	r17, 0x0C	; 12
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     866:	0e 94 b1 02 	call	0x562	; 0x562 <keypad_u8check_press>
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     86a:	8f 3f       	cpi	r24, 0xFF	; 255
     86c:	e1 f3       	breq	.-8      	; 0x866 <__stack+0x7>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     86e:	f6 01       	movw	r30, r12
     870:	81 93       	st	Z+, r24
     872:	6f 01       	movw	r12, r30
			LCD_vSend_char(key_pressed);//print the entered character
     874:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     878:	ff ef       	ldi	r31, 0xFF	; 255
     87a:	25 ea       	ldi	r18, 0xA5	; 165
     87c:	3e e0       	ldi	r19, 0x0E	; 14
     87e:	f1 50       	subi	r31, 0x01	; 1
     880:	20 40       	sbci	r18, 0x00	; 0
     882:	30 40       	sbci	r19, 0x00	; 0
     884:	e1 f7       	brne	.-8      	; 0x87e <__stack+0x1f>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__stack+0x29>
     888:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     88a:	61 2f       	mov	r22, r17
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
     892:	8a e2       	ldi	r24, 0x2A	; 42
     894:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	91 ee       	ldi	r25, 0xE1	; 225
     89c:	e4 e0       	ldi	r30, 0x04	; 4
     89e:	81 50       	subi	r24, 0x01	; 1
     8a0:	90 40       	sbci	r25, 0x00	; 0
     8a2:	e0 40       	sbci	r30, 0x00	; 0
     8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <__stack+0x49>
     8a8:	00 00       	nop
     8aa:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_vSend_string("Admin pass:");

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     8ac:	10 31       	cpi	r17, 0x10	; 16
     8ae:	d9 f6       	brne	.-74     	; 0x866 <__stack+0x7>
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     8b0:	44 e0       	ldi	r20, 0x04	; 4
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	be 01       	movw	r22, r28
     8b6:	6f 5f       	subi	r22, 0xFF	; 255
     8b8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 57 02 	call	0x4ae	; 0x4ae <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_vWriteByteToAddress>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     8cc:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");// show pass saved message
     8d0:	8d eb       	ldi	r24, 0xBD	; 189
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     8d8:	ff ef       	ldi	r31, 0xFF	; 255
     8da:	29 e6       	ldi	r18, 0x69	; 105
     8dc:	38 e1       	ldi	r19, 0x18	; 24
     8de:	f1 50       	subi	r31, 0x01	; 1
     8e0:	20 40       	sbci	r18, 0x00	; 0
     8e2:	30 40       	sbci	r19, 0x00	; 0
     8e4:	e1 f7       	brne	.-8      	; 0x8de <__stack+0x7f>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <__stack+0x89>
     8e8:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     8ea:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");//printing the set admin password menu
     8ee:	88 ec       	ldi	r24, 0xC8	; 200
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
		LCD_movecursor(2,1);
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
		LCD_vSend_string("Guest Pass:");
     8fe:	87 ed       	ldi	r24, 0xD7	; 215
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     906:	1c e0       	ldi	r17, 0x0C	; 12
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     908:	0e 94 b1 02 	call	0x562	; 0x562 <keypad_u8check_press>
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     90c:	8f 3f       	cpi	r24, 0xFF	; 255
     90e:	e1 f3       	breq	.-8      	; 0x908 <__stack+0xa9>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     910:	f7 01       	movw	r30, r14
     912:	81 93       	st	Z+, r24
     914:	7f 01       	movw	r14, r30
			LCD_vSend_char(key_pressed);//print the entered character
     916:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     91a:	ff ef       	ldi	r31, 0xFF	; 255
     91c:	25 ea       	ldi	r18, 0xA5	; 165
     91e:	3e e0       	ldi	r19, 0x0E	; 14
     920:	f1 50       	subi	r31, 0x01	; 1
     922:	20 40       	sbci	r18, 0x00	; 0
     924:	30 40       	sbci	r19, 0x00	; 0
     926:	e1 f7       	brne	.-8      	; 0x920 <__stack+0xc1>
     928:	00 c0       	rjmp	.+0      	; 0x92a <__stack+0xcb>
     92a:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     92c:	61 2f       	mov	r22, r17
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
     934:	8a e2       	ldi	r24, 0x2A	; 42
     936:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	91 ee       	ldi	r25, 0xE1	; 225
     93e:	e4 e0       	ldi	r30, 0x04	; 4
     940:	81 50       	subi	r24, 0x01	; 1
     942:	90 40       	sbci	r25, 0x00	; 0
     944:	e0 40       	sbci	r30, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <__stack+0xe1>
     948:	00 c0       	rjmp	.+0      	; 0x94a <__stack+0xeb>
     94a:	00 00       	nop
     94c:	1f 5f       	subi	r17, 0xFF	; 255
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");//printing the set admin password menu
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     94e:	10 31       	cpi	r17, 0x10	; 16
     950:	d9 f6       	brne	.-74     	; 0x908 <__stack+0xa9>
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_GUEST_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     952:	44 e0       	ldi	r20, 0x04	; 4
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	be 01       	movw	r22, r28
     958:	6f 5f       	subi	r22, 0xFF	; 255
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	86 e0       	ldi	r24, 0x06	; 6
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 57 02 	call	0x4ae	; 0x4ae <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(GUEST_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_vWriteByteToAddress>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     96e:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");//move the lcd cursor to the previous location
     972:	8d eb       	ldi	r24, 0xBD	; 189
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     97a:	ff ef       	ldi	r31, 0xFF	; 255
     97c:	29 e6       	ldi	r18, 0x69	; 105
     97e:	38 e1       	ldi	r19, 0x18	; 24
     980:	f1 50       	subi	r31, 0x01	; 1
     982:	20 40       	sbci	r18, 0x00	; 0
     984:	30 40       	sbci	r19, 0x00	; 0
     986:	e1 f7       	brne	.-8      	; 0x980 <__stack+0x121>
     988:	00 c0       	rjmp	.+0      	; 0x98a <__stack+0x12b>
     98a:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     98c:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_vWriteByteToAddress>
	uint8 temperature = 0;//The average temperature of the room
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
     99a:	c1 2c       	mov	r12, r1
	LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
	{
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <__stack+0x149>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
	}//The end of if admin and guest password is set
	else//this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		block_mode_flag = EEPROM_ui8ReadByteFromAddress(LOGIN_BLOCKED_ADDRESS); //read the blocked location from EEPROM
     99e:	8a e0       	ldi	r24, 0x0A	; 10
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	0e 94 2c 02 	call	0x458	; 0x458 <EEPROM_ui8ReadByteFromAddress>
     9a6:	c8 2e       	mov	r12, r24
	uint8 temperature = 0;//The average temperature of the room
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
     9a8:	f1 2c       	mov	r15, r1
     9aa:	33 24       	eor	r3, r3
     9ac:	3a 94       	dec	r3
     9ae:	0f 2e       	mov	r0, r31
     9b0:	f2 e3       	ldi	r31, 0x32	; 50
     9b2:	9f 2e       	mov	r9, r31
     9b4:	f0 2d       	mov	r31, r0
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
			}

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     9b6:	d3 2c       	mov	r13, r3
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     9b8:	0f 2e       	mov	r0, r31
     9ba:	fa e0       	ldi	r31, 0x0A	; 10
     9bc:	af 2e       	mov	r10, r31
     9be:	f0 2d       	mov	r31, r0
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     9c0:	0f 2e       	mov	r0, r31
     9c2:	f9 e0       	ldi	r31, 0x09	; 9
     9c4:	bf 2e       	mov	r11, r31
     9c6:	f0 2d       	mov	r31, r0
	while (1)//The start of the periodic code
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
		uint8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
		
		if ( timeout_flag==TRUE )//check for timeout
     9c8:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	01 f5       	brne	.+64     	; 0xa10 <__stack+0x1b1>
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
     9d0:	0e 94 04 0a 	call	0x1408	; 0x1408 <timer0_stop>
			session_counter = 0;//clear session counter
     9d4:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <session_counter+0x1>
     9d8:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <session_counter>
			timeout_flag=FALSE;//clear time out flag
     9dc:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <__data_end>
			login_mode=NO_MODE;//log the user out
			key_pressed = NOT_PRESSED;//clear the key_pressed to avoid unwanted selection in the menu switch
			LED_vTurnOff(GUEST_LED_PORT,GUEST_LED_PIN);//turnoff the led of the guest
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	83 e4       	ldi	r24, 0x43	; 67
     9e4:	0e 94 c1 03 	call	0x782	; 0x782 <LED_vTurnOff>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	83 e4       	ldi	r24, 0x43	; 67
     9ec:	0e 94 c1 03 	call	0x782	; 0x782 <LED_vTurnOff>
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9f0:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
			LCD_vSend_string("Session Timeout");//print session timeout message
     9f4:	83 ee       	ldi	r24, 0xE3	; 227
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	93 ed       	ldi	r25, 0xD3	; 211
     a00:	e0 e3       	ldi	r30, 0x30	; 48
     a02:	81 50       	subi	r24, 0x01	; 1
     a04:	90 40       	sbci	r25, 0x00	; 0
     a06:	e0 40       	sbci	r30, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <__stack+0x1a3>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <__stack+0x1ad>
     a0c:	00 00       	nop
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <__stack+0x1b5>
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     a10:	f1 10       	cpse	r15, r1
     a12:	b5 c1       	rjmp	.+874    	; 0xd7e <__stack+0x51f>
	uint8 temperature = 0;//The average temperature of the room
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
     a14:	00 e0       	ldi	r16, 0x00	; 0
     a16:	13 2d       	mov	r17, r3
			LCD_vSend_string("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
		{
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
     a18:	f1 e0       	ldi	r31, 0x01	; 1
     a1a:	cf 12       	cpse	r12, r31
     a1c:	29 c0       	rjmp	.+82     	; 0xa70 <__stack+0x211>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a1e:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
				LCD_vSend_string("Login blocked");
     a22:	83 ef       	ldi	r24, 0xF3	; 243
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
				LCD_movecursor(2,1);
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
				LCD_vSend_string("wait 20 seconds");
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
     a3a:	62 e0       	ldi	r22, 0x02	; 2
     a3c:	83 e4       	ldi	r24, 0x43	; 67
     a3e:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_vTurnOn>
     a42:	24 e5       	ldi	r18, 0x54	; 84
     a44:	3d ec       	ldi	r19, 0xCD	; 205
     a46:	8d e2       	ldi	r24, 0x2D	; 45
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	21 50       	subi	r18, 0x01	; 1
     a4c:	30 40       	sbci	r19, 0x00	; 0
     a4e:	80 40       	sbci	r24, 0x00	; 0
     a50:	90 40       	sbci	r25, 0x00	; 0
     a52:	d9 f7       	brne	.-10     	; 0xa4a <__stack+0x1eb>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <__stack+0x1f7>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <__stack+0x1f9>
     a58:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
				block_mode_flag = FALSE;//Disable block of runtime
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
     a5a:	62 e0       	ldi	r22, 0x02	; 2
     a5c:	83 e4       	ldi	r24, 0x43	; 67
     a5e:	0e 94 c1 03 	call	0x782	; 0x782 <LED_vTurnOff>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	8a e0       	ldi	r24, 0x0A	; 10
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_vWriteByteToAddress>
				LCD_vSend_string("Login blocked");
				LCD_movecursor(2,1);
				LCD_vSend_string("wait 20 seconds");
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
     a6c:	00 e0       	ldi	r16, 0x00	; 0
				block_mode_flag = FALSE;//Disable block of runtime
     a6e:	c1 2c       	mov	r12, r1
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a70:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
			LCD_vSend_string("Select mode :");
     a74:	81 e1       	ldi	r24, 0x11	; 17
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
			LCD_movecursor(2,1);
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
			LCD_vSend_string("0:Admin 1:Guest");
     a84:	8f e1       	ldi	r24, 0x1F	; 31
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     a8c:	1f 3f       	cpi	r17, 0xFF	; 255
     a8e:	29 f4       	brne	.+10     	; 0xa9a <__stack+0x23b>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     a90:	0e 94 b1 02 	call	0x562	; 0x562 <keypad_u8check_press>
     a94:	18 2f       	mov	r17, r24
			}
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Select mode :");
			LCD_movecursor(2,1);
			LCD_vSend_string("0:Admin 1:Guest");
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     a96:	8f 3f       	cpi	r24, 0xFF	; 255
     a98:	d9 f3       	breq	.-10     	; 0xa90 <__stack+0x231>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
     a9a:	80 ed       	ldi	r24, 0xD0	; 208
     a9c:	81 0f       	add	r24, r17
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	88 f0       	brcs	.+34     	; 0xac4 <__stack+0x265>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     aa2:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
				LCD_vSend_string("Wrong input.");//Prints error message on the LCD
     aa6:	8f e2       	ldi	r24, 0x2F	; 47
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     aae:	ef ef       	ldi	r30, 0xFF	; 255
     ab0:	f3 ed       	ldi	r31, 0xD3	; 211
     ab2:	20 e3       	ldi	r18, 0x30	; 48
     ab4:	e1 50       	subi	r30, 0x01	; 1
     ab6:	f0 40       	sbci	r31, 0x00	; 0
     ab8:	20 40       	sbci	r18, 0x00	; 0
     aba:	e1 f7       	brne	.-8      	; 0xab4 <__stack+0x255>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <__stack+0x25f>
     abe:	00 00       	nop
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     ac0:	1d 2d       	mov	r17, r13
     ac2:	aa cf       	rjmp	.-172    	; 0xa18 <__stack+0x1b9>
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
			}

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     ac4:	dd 82       	std	Y+5, r13	; 0x05
     ac6:	de 82       	std	Y+6, r13	; 0x06
     ac8:	df 82       	std	Y+7, r13	; 0x07
     aca:	d8 86       	std	Y+8, r13	; 0x08
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
     acc:	d9 82       	std	Y+1, r13	; 0x01
     ace:	da 82       	std	Y+2, r13	; 0x02
     ad0:	db 82       	std	Y+3, r13	; 0x03
     ad2:	dc 82       	std	Y+4, r13	; 0x04
			
			switch(key_pressed)
     ad4:	10 33       	cpi	r17, 0x30	; 48
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__stack+0x281>
     ad8:	11 33       	cpi	r17, 0x31	; 49
     ada:	09 f4       	brne	.+2      	; 0xade <__stack+0x27f>
     adc:	a6 c0       	rjmp	.+332    	; 0xc2a <__stack+0x3cb>
     ade:	4b c1       	rjmp	.+662    	; 0xd76 <__stack+0x517>
     ae0:	89 2c       	mov	r8, r9
     ae2:	80 1a       	sub	r8, r16
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ae4:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
					LCD_vSend_string("Admin mode");
     ae8:	8c e3       	ldi	r24, 0x3C	; 60
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					LCD_movecursor(2,1);
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
					LCD_vSend_string("Enter Pass:");
     af8:	87 e4       	ldi	r24, 0x47	; 71
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     b00:	3f ef       	ldi	r19, 0xFF	; 255
     b02:	83 ec       	ldi	r24, 0xC3	; 195
     b04:	99 e0       	ldi	r25, 0x09	; 9
     b06:	31 50       	subi	r19, 0x01	; 1
     b08:	80 40       	sbci	r24, 0x00	; 0
     b0a:	90 40       	sbci	r25, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <__stack+0x2a7>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <__stack+0x2b1>
     b10:	00 00       	nop
     b12:	7e 01       	movw	r14, r28
     b14:	e5 e0       	ldi	r30, 0x05	; 5
     b16:	ee 0e       	add	r14, r30
     b18:	f1 1c       	adc	r15, r1
     b1a:	1c e0       	ldi	r17, 0x0C	; 12
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     b1c:	0e 94 b1 02 	call	0x562	; 0x562 <keypad_u8check_press>
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     b20:	8f 3f       	cpi	r24, 0xFF	; 255
     b22:	e1 f3       	breq	.-8      	; 0xb1c <__stack+0x2bd>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the entered character to the pass array
     b24:	f7 01       	movw	r30, r14
     b26:	81 93       	st	Z+, r24
     b28:	7f 01       	movw	r14, r30
						LCD_vSend_char(key_pressed);//print the entered character
     b2a:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     b2e:	ff ef       	ldi	r31, 0xFF	; 255
     b30:	25 ea       	ldi	r18, 0xA5	; 165
     b32:	3e e0       	ldi	r19, 0x0E	; 14
     b34:	f1 50       	subi	r31, 0x01	; 1
     b36:	20 40       	sbci	r18, 0x00	; 0
     b38:	30 40       	sbci	r19, 0x00	; 0
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <__stack+0x2d5>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <__stack+0x2df>
     b3e:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
     b40:	61 2f       	mov	r22, r17
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL);// to display (Password sign *)
     b48:	8a e2       	ldi	r24, 0x2A	; 42
     b4a:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	91 ee       	ldi	r25, 0xE1	; 225
     b52:	e4 e0       	ldi	r30, 0x04	; 4
     b54:	81 50       	subi	r24, 0x01	; 1
     b56:	90 40       	sbci	r25, 0x00	; 0
     b58:	e0 40       	sbci	r30, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <__stack+0x2f5>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <__stack+0x2ff>
     b5e:	00 00       	nop
     b60:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_vSend_string("Admin mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     b62:	10 31       	cpi	r17, 0x10	; 16
     b64:	d9 f6       	brne	.-74     	; 0xb1c <__stack+0x2bd>
						LCD_vSend_char(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
     b66:	44 e0       	ldi	r20, 0x04	; 4
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	be 01       	movw	r22, r28
     b6c:	6f 5f       	subi	r22, 0xFF	; 255
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 33 02 	call	0x466	; 0x466 <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
     b78:	44 e0       	ldi	r20, 0x04	; 4
     b7a:	be 01       	movw	r22, r28
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	ce 01       	movw	r24, r28
     b82:	05 96       	adiw	r24, 0x05	; 5
     b84:	0e 94 c4 08 	call	0x1188	; 0x1188 <ui8ComparePass>
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	21 f5       	brne	.+72     	; 0xbd4 <__stack+0x375>
					{
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b8c:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Right pass");
     b90:	83 e5       	ldi	r24, 0x53	; 83
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
						LCD_movecursor(2,1);
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
						LCD_vSend_string("Admin mode");
     ba0:	8c e3       	ldi	r24, 0x3C	; 60
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     ba8:	ff ef       	ldi	r31, 0xFF	; 255
     baa:	29 e6       	ldi	r18, 0x69	; 105
     bac:	38 e1       	ldi	r19, 0x18	; 24
     bae:	f1 50       	subi	r31, 0x01	; 1
     bb0:	20 40       	sbci	r18, 0x00	; 0
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	e1 f7       	brne	.-8      	; 0xbae <__stack+0x34f>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <__stack+0x359>
     bb8:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);//turn on the led of admin
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	83 e4       	ldi	r24, 0x43	; 67
     bbe:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_vTurnOn>
						timer0_initializeCTC();//start the timer that counts the session time
     bc2:	0e 94 ee 09 	call	0x13dc	; 0x13dc <timer0_initializeCTC>
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bc6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>

					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
					{
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
     bca:	00 e0       	ldi	r16, 0x00	; 0
						LCD_movecursor(2,1);
						LCD_vSend_string("Admin mode");
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);//turn on the led of admin
						timer0_initializeCTC();//start the timer that counts the session time
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bcc:	1d 2d       	mov	r17, r13
     bce:	ff 24       	eor	r15, r15
     bd0:	f3 94       	inc	r15
     bd2:	d2 c0       	rjmp	.+420    	; 0xd78 <__stack+0x519>
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     bd4:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bd6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Wrong Pass");
     bda:	8e e5       	ldi	r24, 0x5E	; 94
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
						LCD_movecursor(2,1);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
						LCD_vSend_string("Tries left:");
     bea:	89 e6       	ldi	r24, 0x69	; 105
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     bf2:	88 2d       	mov	r24, r8
     bf4:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	93 ed       	ldi	r25, 0xD3	; 211
     bfc:	e0 e3       	ldi	r30, 0x30	; 48
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	90 40       	sbci	r25, 0x00	; 0
     c02:	e0 40       	sbci	r30, 0x00	; 0
     c04:	e1 f7       	brne	.-8      	; 0xbfe <__stack+0x39f>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <__stack+0x3a9>
     c08:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c0a:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
     c0e:	8a 94       	dec	r8
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     c10:	03 30       	cpi	r16, 0x03	; 3
     c12:	08 f4       	brcc	.+2      	; 0xc16 <__stack+0x3b7>
     c14:	67 cf       	rjmp	.-306    	; 0xae4 <__stack+0x285>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	8a e0       	ldi	r24, 0x0A	; 10
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     c20:	1d 2d       	mov	r17, r13
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     c22:	cc 24       	eor	r12, r12
     c24:	c3 94       	inc	r12
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
     c26:	f1 2c       	mov	r15, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     c28:	a7 c0       	rjmp	.+334    	; 0xd78 <__stack+0x519>
     c2a:	89 2c       	mov	r8, r9
     c2c:	80 1a       	sub	r8, r16
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c2e:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
					LCD_vSend_string("Guest mode");
     c32:	85 e7       	ldi	r24, 0x75	; 117
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					LCD_movecursor(2,1);
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
					LCD_vSend_string("Enter pass:");
     c42:	80 e8       	ldi	r24, 0x80	; 128
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     c4a:	ff ef       	ldi	r31, 0xFF	; 255
     c4c:	23 ec       	ldi	r18, 0xC3	; 195
     c4e:	39 e0       	ldi	r19, 0x09	; 9
     c50:	f1 50       	subi	r31, 0x01	; 1
     c52:	20 40       	sbci	r18, 0x00	; 0
     c54:	30 40       	sbci	r19, 0x00	; 0
     c56:	e1 f7       	brne	.-8      	; 0xc50 <__stack+0x3f1>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <__stack+0x3fb>
     c5a:	00 00       	nop
     c5c:	7e 01       	movw	r14, r28
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	e8 0e       	add	r14, r24
     c62:	f1 1c       	adc	r15, r1
     c64:	1c e0       	ldi	r17, 0x0C	; 12
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     c66:	0e 94 b1 02 	call	0x562	; 0x562 <keypad_u8check_press>
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     c6a:	8f 3f       	cpi	r24, 0xFF	; 255
     c6c:	e1 f3       	breq	.-8      	; 0xc66 <__stack+0x407>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the pressed key to the password string
     c6e:	f7 01       	movw	r30, r14
     c70:	81 93       	st	Z+, r24
     c72:	7f 01       	movw	r14, r30
						LCD_vSend_char(key_pressed);//print the entered character
     c74:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     c78:	ff ef       	ldi	r31, 0xFF	; 255
     c7a:	25 ea       	ldi	r18, 0xA5	; 165
     c7c:	3e e0       	ldi	r19, 0x0E	; 14
     c7e:	f1 50       	subi	r31, 0x01	; 1
     c80:	20 40       	sbci	r18, 0x00	; 0
     c82:	30 40       	sbci	r19, 0x00	; 0
     c84:	e1 f7       	brne	.-8      	; 0xc7e <__stack+0x41f>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <__stack+0x429>
     c88:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
     c8a:	61 2f       	mov	r22, r17
     c8c:	82 e0       	ldi	r24, 0x02	; 2
     c8e:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
     c92:	8a e2       	ldi	r24, 0x2A	; 42
     c94:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	91 ee       	ldi	r25, 0xE1	; 225
     c9c:	e4 e0       	ldi	r30, 0x04	; 4
     c9e:	81 50       	subi	r24, 0x01	; 1
     ca0:	90 40       	sbci	r25, 0x00	; 0
     ca2:	e0 40       	sbci	r30, 0x00	; 0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <__stack+0x43f>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <__stack+0x449>
     ca8:	00 00       	nop
     caa:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_vSend_string("Guest mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     cac:	10 31       	cpi	r17, 0x10	; 16
     cae:	d9 f6       	brne	.-74     	; 0xc66 <__stack+0x407>
						LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
     cb0:	44 e0       	ldi	r20, 0x04	; 4
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	be 01       	movw	r22, r28
     cb6:	6f 5f       	subi	r22, 0xFF	; 255
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	86 e0       	ldi	r24, 0x06	; 6
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	0e 94 33 02 	call	0x466	; 0x466 <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
     cc2:	44 e0       	ldi	r20, 0x04	; 4
     cc4:	be 01       	movw	r22, r28
     cc6:	6f 5f       	subi	r22, 0xFF	; 255
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
     cca:	ce 01       	movw	r24, r28
     ccc:	05 96       	adiw	r24, 0x05	; 5
     cce:	0e 94 c4 08 	call	0x1188	; 0x1188 <ui8ComparePass>
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	29 f5       	brne	.+74     	; 0xd20 <__stack+0x4c1>
					{
						login_mode = GUEST;
						pass_tries_count=0;//clear the counter of wrong tries
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     cd6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Right pass");
     cda:	83 e5       	ldi	r24, 0x53	; 83
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
						LCD_movecursor(2,1);
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
						LCD_vSend_string("Guest mode");
     cea:	85 e7       	ldi	r24, 0x75	; 117
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     cf2:	ff ef       	ldi	r31, 0xFF	; 255
     cf4:	29 e6       	ldi	r18, 0x69	; 105
     cf6:	38 e1       	ldi	r19, 0x18	; 24
     cf8:	f1 50       	subi	r31, 0x01	; 1
     cfa:	20 40       	sbci	r18, 0x00	; 0
     cfc:	30 40       	sbci	r19, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <__stack+0x499>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <__stack+0x4a3>
     d02:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);//turn the led of gust mode that is connected to the master micro controller on
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	83 e4       	ldi	r24, 0x43	; 67
     d08:	0e 94 bd 03 	call	0x77a	; 0x77a <LED_vTurnOn>
						timer0_initializeCTC();//start the counter of the session
     d0c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <timer0_initializeCTC>
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d10:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
					{
						login_mode = GUEST;
						pass_tries_count=0;//clear the counter of wrong tries
     d14:	00 e0       	ldi	r16, 0x00	; 0
						LCD_movecursor(2,1);
						LCD_vSend_string("Guest mode");
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);//turn the led of gust mode that is connected to the master micro controller on
						timer0_initializeCTC();//start the counter of the session
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d16:	1d 2d       	mov	r17, r13
     d18:	68 94       	set
     d1a:	ff 24       	eor	r15, r15
     d1c:	f1 f8       	bld	r15, 1
     d1e:	2c c0       	rjmp	.+88     	; 0xd78 <__stack+0x519>
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     d20:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d22:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Wrong pass");
     d26:	8c e8       	ldi	r24, 0x8C	; 140
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
						LCD_movecursor(2,1);
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
						LCD_vSend_string("Tries left:");
     d36:	89 e6       	ldi	r24, 0x69	; 105
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     d3e:	88 2d       	mov	r24, r8
     d40:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	93 ed       	ldi	r25, 0xD3	; 211
     d48:	e0 e3       	ldi	r30, 0x30	; 48
     d4a:	81 50       	subi	r24, 0x01	; 1
     d4c:	90 40       	sbci	r25, 0x00	; 0
     d4e:	e0 40       	sbci	r30, 0x00	; 0
     d50:	e1 f7       	brne	.-8      	; 0xd4a <__stack+0x4eb>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <__stack+0x4f5>
     d54:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d56:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
     d5a:	8a 94       	dec	r8
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     d5c:	03 30       	cpi	r16, 0x03	; 3
     d5e:	08 f4       	brcc	.+2      	; 0xd62 <__stack+0x503>
     d60:	66 cf       	rjmp	.-308    	; 0xc2e <__stack+0x3cf>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	8a e0       	ldi	r24, 0x0A	; 10
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     d6c:	1d 2d       	mov	r17, r13
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     d6e:	cc 24       	eor	r12, r12
     d70:	c3 94       	inc	r12
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
     d72:	f1 2c       	mov	r15, r1
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <__stack+0x519>

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
			
			switch(key_pressed)
     d76:	f1 2c       	mov	r15, r1
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     d78:	ff 20       	and	r15, r15
     d7a:	09 f4       	brne	.+2      	; 0xd7e <__stack+0x51f>
     d7c:	4d ce       	rjmp	.-870    	; 0xa18 <__stack+0x1b9>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     d7e:	01 e0       	ldi	r16, 0x01	; 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
     d80:	0f 2e       	mov	r0, r31
     d82:	f7 e0       	ldi	r31, 0x07	; 7
     d84:	5f 2e       	mov	r5, r31
     d86:	f0 2d       	mov	r31, r0
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     d88:	68 94       	set
     d8a:	88 24       	eor	r8, r8
     d8c:	83 f8       	bld	r8, 3
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     d8e:	0f 2e       	mov	r0, r31
     d90:	f6 e0       	ldi	r31, 0x06	; 6
     d92:	ef 2e       	mov	r14, r31
     d94:	f0 2d       	mov	r31, r0
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     d96:	0f 2e       	mov	r0, r31
     d98:	f3 e0       	ldi	r31, 0x03	; 3
     d9a:	7f 2e       	mov	r7, r31
     d9c:	f0 2d       	mov	r31, r0
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     d9e:	68 94       	set
     da0:	66 24       	eor	r6, r6
     da2:	62 f8       	bld	r6, 2
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     da4:	0f 2e       	mov	r0, r31
     da6:	f5 e0       	ldi	r31, 0x05	; 5
     da8:	4f 2e       	mov	r4, r31
     daa:	f0 2d       	mov	r31, r0
     dac:	a6 c1       	rjmp	.+844    	; 0x10fa <__stack+0x89b>
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
			switch (show_menu)
     dae:	fa 01       	movw	r30, r20
     db0:	31 97       	sbiw	r30, 0x01	; 1
     db2:	ea 30       	cpi	r30, 0x0A	; 10
     db4:	f1 05       	cpc	r31, r1
     db6:	08 f0       	brcs	.+2      	; 0xdba <__stack+0x55b>
     db8:	a4 c1       	rjmp	.+840    	; 0x1102 <__stack+0x8a3>
     dba:	e6 5d       	subi	r30, 0xD6	; 214
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__tablejump2__>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
     dc2:	88 23       	and	r24, r24
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <__stack+0x569>
     dc6:	fe c0       	rjmp	.+508    	; 0xfc4 <__stack+0x765>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     dc8:	08 2d       	mov	r16, r8
     dca:	97 c1       	rjmp	.+814    	; 0x10fa <__stack+0x89b>
			{
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					LCD_clearscreen();
     dcc:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
					LCD_vSend_string("1:Room1 2:Room2");
     dd0:	87 e9       	ldi	r24, 0x97	; 151
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					LCD_movecursor(2,1);
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
					if(login_mode==ADMIN)//check login mode
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	ff 12       	cpse	r15, r31
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <__stack+0x591>
					{
						LCD_vSend_string("3:Room3 4:More ");//this menu options only printed if the logged in user is an admin
     de6:	87 ea       	ldi	r24, 0xA7	; 167
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <__stack+0x59f>
					}
					else if(login_mode==GUEST)//check login mode
     df0:	22 e0       	ldi	r18, 0x02	; 2
     df2:	f2 12       	cpse	r15, r18
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <__stack+0x59f>
					{
						LCD_vSend_string("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
     df6:	87 eb       	ldi	r24, 0xB7	; 183
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					}
					/*******************************************************/
					
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     dfe:	8f 2d       	mov	r24, r15
     e00:	0e 94 e6 08 	call	0x11cc	; 0x11cc <u8GetKeyPressed>
     e04:	18 2f       	mov	r17, r24
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	81 ee       	ldi	r24, 0xE1	; 225
     e0a:	94 e0       	ldi	r25, 0x04	; 4
     e0c:	31 50       	subi	r19, 0x01	; 1
     e0e:	80 40       	sbci	r24, 0x00	; 0
     e10:	90 40       	sbci	r25, 0x00	; 0
     e12:	e1 f7       	brne	.-8      	; 0xe0c <__stack+0x5ad>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <__stack+0x5b7>
     e16:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
     e18:	11 33       	cpi	r17, 0x31	; 49
     e1a:	09 f4       	brne	.+2      	; 0xe1e <__stack+0x5bf>
     e1c:	76 c1       	rjmp	.+748    	; 0x110a <__stack+0x8ab>
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
     e1e:	12 33       	cpi	r17, 0x32	; 50
     e20:	09 f4       	brne	.+2      	; 0xe24 <__stack+0x5c5>
     e22:	75 c1       	rjmp	.+746    	; 0x110e <__stack+0x8af>
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
     e24:	13 33       	cpi	r17, 0x33	; 51
     e26:	09 f4       	brne	.+2      	; 0xe2a <__stack+0x5cb>
     e28:	74 c1       	rjmp	.+744    	; 0x1112 <__stack+0x8b3>
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
     e2a:	14 33       	cpi	r17, 0x34	; 52
     e2c:	41 f4       	brne	.+16     	; 0xe3e <__stack+0x5df>
     e2e:	e2 e0       	ldi	r30, 0x02	; 2
     e30:	fe 16       	cp	r15, r30
     e32:	09 f4       	brne	.+2      	; 0xe36 <__stack+0x5d7>
     e34:	70 c1       	rjmp	.+736    	; 0x1116 <__stack+0x8b7>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
     e36:	f1 e0       	ldi	r31, 0x01	; 1
     e38:	ff 12       	cpse	r15, r31
     e3a:	7f c1       	rjmp	.+766    	; 0x113a <__stack+0x8db>
     e3c:	6e c1       	rjmp	.+732    	; 0x111a <__stack+0x8bb>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     e3e:	1f 3f       	cpi	r17, 0xFF	; 255
     e40:	99 f0       	breq	.+38     	; 0xe68 <__stack+0x609>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     e42:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
     e46:	87 ec       	ldi	r24, 0xC7	; 199
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     e4e:	2f ef       	ldi	r18, 0xFF	; 255
     e50:	39 e6       	ldi	r19, 0x69	; 105
     e52:	88 e1       	ldi	r24, 0x18	; 24
     e54:	21 50       	subi	r18, 0x01	; 1
     e56:	30 40       	sbci	r19, 0x00	; 0
     e58:	80 40       	sbci	r24, 0x00	; 0
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <__stack+0x5f5>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <__stack+0x5ff>
     e5e:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );//break the loop in case of valid key or time is out
     e60:	11 53       	subi	r17, 0x31	; 49
     e62:	14 30       	cpi	r17, 0x04	; 4
     e64:	08 f4       	brcc	.+2      	; 0xe68 <__stack+0x609>
     e66:	49 c1       	rjmp	.+658    	; 0x10fa <__stack+0x89b>
     e68:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
     e6c:	88 23       	and	r24, r24
     e6e:	09 f4       	brne	.+2      	; 0xe72 <__stack+0x613>
     e70:	ad cf       	rjmp	.-166    	; 0xdcc <__stack+0x56d>
     e72:	43 c1       	rjmp	.+646    	; 0x10fa <__stack+0x89b>
				
				case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     e74:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
					LCD_vSend_string("1:Room4    2:TV   ");
     e78:	83 ed       	ldi	r24, 0xD3	; 211
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					LCD_movecursor(2,1);
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
					LCD_vSend_string("3:Air Cond.4:RET");
     e88:	86 ee       	ldi	r24, 0xE6	; 230
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     e90:	8f 2d       	mov	r24, r15
     e92:	0e 94 e6 08 	call	0x11cc	; 0x11cc <u8GetKeyPressed>
     e96:	18 2f       	mov	r17, r24
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	e1 ee       	ldi	r30, 0xE1	; 225
     e9c:	f4 e0       	ldi	r31, 0x04	; 4
     e9e:	91 50       	subi	r25, 0x01	; 1
     ea0:	e0 40       	sbci	r30, 0x00	; 0
     ea2:	f0 40       	sbci	r31, 0x00	; 0
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <__stack+0x63f>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <__stack+0x649>
     ea8:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
     eaa:	81 33       	cpi	r24, 0x31	; 49
     eac:	09 f4       	brne	.+2      	; 0xeb0 <__stack+0x651>
     eae:	37 c1       	rjmp	.+622    	; 0x111e <__stack+0x8bf>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
     eb0:	82 33       	cpi	r24, 0x32	; 50
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <__stack+0x657>
     eb4:	36 c1       	rjmp	.+620    	; 0x1122 <__stack+0x8c3>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
     eb6:	83 33       	cpi	r24, 0x33	; 51
     eb8:	09 f4       	brne	.+2      	; 0xebc <__stack+0x65d>
     eba:	35 c1       	rjmp	.+618    	; 0x1126 <__stack+0x8c7>
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
     ebc:	84 33       	cpi	r24, 0x34	; 52
     ebe:	09 f4       	brne	.+2      	; 0xec2 <__stack+0x663>
     ec0:	34 c1       	rjmp	.+616    	; 0x112a <__stack+0x8cb>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     ec2:	8f 3f       	cpi	r24, 0xFF	; 255
     ec4:	99 f0       	breq	.+38     	; 0xeec <__stack+0x68d>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ec6:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
     eca:	87 ec       	ldi	r24, 0xC7	; 199
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     ed2:	2f ef       	ldi	r18, 0xFF	; 255
     ed4:	39 e6       	ldi	r19, 0x69	; 105
     ed6:	88 e1       	ldi	r24, 0x18	; 24
     ed8:	21 50       	subi	r18, 0x01	; 1
     eda:	30 40       	sbci	r19, 0x00	; 0
     edc:	80 40       	sbci	r24, 0x00	; 0
     ede:	e1 f7       	brne	.-8      	; 0xed8 <__stack+0x679>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <__stack+0x683>
     ee2:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     ee4:	11 53       	subi	r17, 0x31	; 49
     ee6:	14 30       	cpi	r17, 0x04	; 4
     ee8:	08 f4       	brcc	.+2      	; 0xeec <__stack+0x68d>
     eea:	07 c1       	rjmp	.+526    	; 0x10fa <__stack+0x89b>
     eec:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
     ef0:	88 23       	and	r24, r24
     ef2:	09 f4       	brne	.+2      	; 0xef6 <__stack+0x697>
     ef4:	bf cf       	rjmp	.-130    	; 0xe74 <__stack+0x615>
     ef6:	01 c1       	rjmp	.+514    	; 0x10fa <__stack+0x89b>
				
				case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ef8:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
					LCD_vSend_string("1:Set temperature ");
     efc:	87 ef       	ldi	r24, 0xF7	; 247
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					LCD_movecursor(2,1);
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
					LCD_vSend_string("2:Control  0:RET");
     f0c:	8a e0       	ldi	r24, 0x0A	; 10
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     f14:	8f 2d       	mov	r24, r15
     f16:	0e 94 e6 08 	call	0x11cc	; 0x11cc <u8GetKeyPressed>
     f1a:	18 2f       	mov	r17, r24
     f1c:	9f ef       	ldi	r25, 0xFF	; 255
     f1e:	e1 ee       	ldi	r30, 0xE1	; 225
     f20:	f4 e0       	ldi	r31, 0x04	; 4
     f22:	91 50       	subi	r25, 0x01	; 1
     f24:	e0 40       	sbci	r30, 0x00	; 0
     f26:	f0 40       	sbci	r31, 0x00	; 0
     f28:	e1 f7       	brne	.-8      	; 0xf22 <__stack+0x6c3>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <__stack+0x6cd>
     f2c:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
     f2e:	81 33       	cpi	r24, 0x31	; 49
     f30:	09 f4       	brne	.+2      	; 0xf34 <__stack+0x6d5>
     f32:	fd c0       	rjmp	.+506    	; 0x112e <__stack+0x8cf>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
     f34:	82 33       	cpi	r24, 0x32	; 50
     f36:	09 f4       	brne	.+2      	; 0xf3a <__stack+0x6db>
     f38:	fc c0       	rjmp	.+504    	; 0x1132 <__stack+0x8d3>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
     f3a:	80 33       	cpi	r24, 0x30	; 48
     f3c:	09 f4       	brne	.+2      	; 0xf40 <__stack+0x6e1>
     f3e:	fb c0       	rjmp	.+502    	; 0x1136 <__stack+0x8d7>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     f40:	8f 3f       	cpi	r24, 0xFF	; 255
     f42:	99 f0       	breq	.+38     	; 0xf6a <__stack+0x70b>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     f44:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
     f48:	87 ec       	ldi	r24, 0xC7	; 199
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
     f50:	2f ef       	ldi	r18, 0xFF	; 255
     f52:	39 e6       	ldi	r19, 0x69	; 105
     f54:	88 e1       	ldi	r24, 0x18	; 24
     f56:	21 50       	subi	r18, 0x01	; 1
     f58:	30 40       	sbci	r19, 0x00	; 0
     f5a:	80 40       	sbci	r24, 0x00	; 0
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <__stack+0x6f7>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <__stack+0x701>
     f60:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     f62:	10 53       	subi	r17, 0x30	; 48
     f64:	13 30       	cpi	r17, 0x03	; 3
     f66:	08 f4       	brcc	.+2      	; 0xf6a <__stack+0x70b>
     f68:	c8 c0       	rjmp	.+400    	; 0x10fa <__stack+0x89b>
     f6a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
     f6e:	88 23       	and	r24, r24
     f70:	19 f2       	breq	.-122    	; 0xef8 <__stack+0x699>
     f72:	c3 c0       	rjmp	.+390    	; 0x10fa <__stack+0x89b>
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
     f74:	6f 2d       	mov	r22, r15
     f76:	87 2d       	mov	r24, r7
     f78:	0e 94 05 09 	call	0x120a	; 0x120a <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     f7c:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room1 menu case
     f7e:	bd c0       	rjmp	.+378    	; 0x10fa <__stack+0x89b>
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
     f80:	6f 2d       	mov	r22, r15
     f82:	86 2d       	mov	r24, r6
     f84:	0e 94 05 09 	call	0x120a	; 0x120a <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     f88:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room2 menu case
     f8a:	b7 c0       	rjmp	.+366    	; 0x10fa <__stack+0x89b>
				
				case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
     f8c:	6f 2d       	mov	r22, r15
     f8e:	84 2d       	mov	r24, r4
     f90:	0e 94 05 09 	call	0x120a	; 0x120a <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     f94:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room3 menu case
     f96:	b1 c0       	rjmp	.+354    	; 0x10fa <__stack+0x89b>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
     f98:	6f 2d       	mov	r22, r15
     f9a:	8e 2d       	mov	r24, r14
     f9c:	0e 94 05 09 	call	0x120a	; 0x120a <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	f9 16       	cp	r15, r25
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <__stack+0x749>
     fa6:	a2 c0       	rjmp	.+324    	; 0x10ec <__stack+0x88d>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
				}
				else//in case of admin is logged in
				{
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     fa8:	02 e0       	ldi	r16, 0x02	; 2
     faa:	a7 c0       	rjmp	.+334    	; 0x10fa <__stack+0x89b>
				}
				break;//End of room4 menu case
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
     fac:	6f 2d       	mov	r22, r15
     fae:	85 2d       	mov	r24, r5
     fb0:	0e 94 05 09 	call	0x120a	; 0x120a <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     fb4:	02 e0       	ldi	r16, 0x02	; 2
				break;//End of TV menu case
     fb6:	a1 c0       	rjmp	.+322    	; 0x10fa <__stack+0x89b>
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
     fb8:	6f 2d       	mov	r22, r15
     fba:	8b 2d       	mov	r24, r11
     fbc:	0e 94 05 09 	call	0x120a	; 0x120a <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     fc0:	08 2d       	mov	r16, r8
				break;//End of air conditioning control menu case
     fc2:	9b c0       	rjmp	.+310    	; 0x10fa <__stack+0x89b>
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NOT_PRESSED;//set the key pressed to the default value
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     fc4:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
					LCD_vSend_string("Set temp.:__ ");//print the format of inserting temperature
     fc8:	8b e1       	ldi	r24, 0x1B	; 27
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
					LCD_vSend_char(DEGREES_SYMBOL); // print the symbol of degree
     fd0:	8f ed       	ldi	r24, 0xDF	; 223
     fd2:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
					LCD_vSend_char('C'); // print the C character
     fd6:	83 e4       	ldi	r24, 0x43	; 67
     fd8:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
					LCD_movecursor(1,11);//move the cursor to the place to write the entered temperature
     fdc:	6b e0       	ldi	r22, 0x0B	; 11
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
     fe4:	ef ef       	ldi	r30, 0xFF	; 255
     fe6:	f3 ec       	ldi	r31, 0xC3	; 195
     fe8:	29 e0       	ldi	r18, 0x09	; 9
     fea:	e1 50       	subi	r30, 0x01	; 1
     fec:	f0 40       	sbci	r31, 0x00	; 0
     fee:	20 40       	sbci	r18, 0x00	; 0
     ff0:	e1 f7       	brne	.-8      	; 0xfea <__stack+0x78b>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <__stack+0x795>
     ff4:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     ff6:	8f 2d       	mov	r24, r15
     ff8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <u8GetKeyPressed>
     ffc:	3f ef       	ldi	r19, 0xFF	; 255
     ffe:	94 e3       	ldi	r25, 0x34	; 52
    1000:	ec e0       	ldi	r30, 0x0C	; 12
    1002:	31 50       	subi	r19, 0x01	; 1
    1004:	90 40       	sbci	r25, 0x00	; 0
    1006:	e0 40       	sbci	r30, 0x00	; 0
    1008:	e1 f7       	brne	.-8      	; 0x1002 <__stack+0x7a3>
    100a:	00 c0       	rjmp	.+0      	; 0x100c <__stack+0x7ad>
    100c:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key

					if (timeout_flag == TRUE) //in case of the time is out before the user press a key
    100e:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <__data_end>
    1012:	91 30       	cpi	r25, 0x01	; 1
    1014:	09 f4       	brne	.+2      	; 0x1018 <__stack+0x7b9>
    1016:	6c c0       	rjmp	.+216    	; 0x10f0 <__stack+0x891>
					{
						break;//break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
    1018:	10 ed       	ldi	r17, 0xD0	; 208
    101a:	18 0f       	add	r17, r24
    101c:	1a 30       	cpi	r17, 0x0A	; 10
    101e:	80 f0       	brcs	.+32     	; 0x1040 <__stack+0x7e1>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    1020:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    1024:	87 ec       	ldi	r24, 0xC7	; 199
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
    102c:	ff ef       	ldi	r31, 0xFF	; 255
    102e:	29 e6       	ldi	r18, 0x69	; 105
    1030:	38 e1       	ldi	r19, 0x18	; 24
    1032:	f1 50       	subi	r31, 0x01	; 1
    1034:	20 40       	sbci	r18, 0x00	; 0
    1036:	30 40       	sbci	r19, 0x00	; 0
    1038:	e1 f7       	brne	.-8      	; 0x1032 <__stack+0x7d3>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <__stack+0x7dd>
    103c:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
    103e:	4f c0       	rjmp	.+158    	; 0x10de <__stack+0x87f>
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
    1040:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
						temp_tens = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
					}
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
    1044:	8f 2d       	mov	r24, r15
    1046:	0e 94 e6 08 	call	0x11cc	; 0x11cc <u8GetKeyPressed>
    104a:	9f ef       	ldi	r25, 0xFF	; 255
    104c:	e4 e3       	ldi	r30, 0x34	; 52
    104e:	fc e0       	ldi	r31, 0x0C	; 12
    1050:	91 50       	subi	r25, 0x01	; 1
    1052:	e0 40       	sbci	r30, 0x00	; 0
    1054:	f0 40       	sbci	r31, 0x00	; 0
    1056:	e1 f7       	brne	.-8      	; 0x1050 <__stack+0x7f1>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <__stack+0x7fb>
    105a:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key
					
					if (timeout_flag == TRUE)//if the user session is timeout
    105c:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <__data_end>
    1060:	91 30       	cpi	r25, 0x01	; 1
    1062:	09 f4       	brne	.+2      	; 0x1066 <__stack+0x807>
    1064:	47 c0       	rjmp	.+142    	; 0x10f4 <__stack+0x895>
					{
						break;//break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
    1066:	00 ed       	ldi	r16, 0xD0	; 208
    1068:	08 0f       	add	r16, r24
    106a:	0a 30       	cpi	r16, 0x0A	; 10
    106c:	80 f0       	brcs	.+32     	; 0x108e <__stack+0x82f>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    106e:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    1072:	87 ec       	ldi	r24, 0xC7	; 199
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
    107a:	2f ef       	ldi	r18, 0xFF	; 255
    107c:	39 e6       	ldi	r19, 0x69	; 105
    107e:	88 e1       	ldi	r24, 0x18	; 24
    1080:	21 50       	subi	r18, 0x01	; 1
    1082:	30 40       	sbci	r19, 0x00	; 0
    1084:	80 40       	sbci	r24, 0x00	; 0
    1086:	e1 f7       	brne	.-8      	; 0x1080 <__stack+0x821>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <__stack+0x82b>
    108a:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
    108c:	28 c0       	rjmp	.+80     	; 0x10de <__stack+0x87f>
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
    108e:	0e 94 8c 03 	call	0x718	; 0x718 <LCD_vSend_char>
						temp_ones = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
    1092:	11 0f       	add	r17, r17
    1094:	81 2f       	mov	r24, r17
    1096:	88 0f       	add	r24, r24
    1098:	88 0f       	add	r24, r24
    109a:	18 0f       	add	r17, r24
    109c:	01 0f       	add	r16, r17
					SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
    109e:	80 e4       	ldi	r24, 0x40	; 64
    10a0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <SPI_ui8TransmitRecive>
    10a4:	9f ef       	ldi	r25, 0xFF	; 255
    10a6:	e3 ec       	ldi	r30, 0xC3	; 195
    10a8:	f9 e0       	ldi	r31, 0x09	; 9
    10aa:	91 50       	subi	r25, 0x01	; 1
    10ac:	e0 40       	sbci	r30, 0x00	; 0
    10ae:	f0 40       	sbci	r31, 0x00	; 0
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <__stack+0x84b>
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <__stack+0x855>
    10b4:	00 00       	nop
					_delay_ms(200);//Halt the system to prevent write collision
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
    10b6:	80 2f       	mov	r24, r16
    10b8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <SPI_ui8TransmitRecive>
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    10bc:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
					LCD_vSend_string("Temperature Sent");//show the message
    10c0:	89 e2       	ldi	r24, 0x29	; 41
    10c2:	92 e0       	ldi	r25, 0x02	; 2
    10c4:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
    10c8:	2f ef       	ldi	r18, 0xFF	; 255
    10ca:	39 e6       	ldi	r19, 0x69	; 105
    10cc:	88 e1       	ldi	r24, 0x18	; 24
    10ce:	21 50       	subi	r18, 0x01	; 1
    10d0:	30 40       	sbci	r19, 0x00	; 0
    10d2:	80 40       	sbci	r24, 0x00	; 0
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <__stack+0x86f>
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <__stack+0x879>
    10d8:	00 00       	nop
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
    10da:	01 11       	cpse	r16, r1
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <__stack+0x899>
    10de:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
    10e2:	88 23       	and	r24, r24
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <__stack+0x889>
    10e6:	6e cf       	rjmp	.-292    	; 0xfc4 <__stack+0x765>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    10e8:	08 2d       	mov	r16, r8
    10ea:	07 c0       	rjmp	.+14     	; 0x10fa <__stack+0x89b>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
				if (login_mode == GUEST)//in case of guest is logged in
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    10ec:	01 e0       	ldi	r16, 0x01	; 1
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <__stack+0x89b>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    10f0:	08 2d       	mov	r16, r8
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <__stack+0x89b>
    10f4:	08 2d       	mov	r16, r8
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <__stack+0x89b>
    10f8:	08 2d       	mov	r16, r8
		
		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
    10fa:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
			switch (show_menu)
    10fe:	40 2f       	mov	r20, r16
    1100:	50 e0       	ldi	r21, 0x00	; 0
		
		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	09 f0       	breq	.+2      	; 0x1108 <__stack+0x8a9>
    1106:	53 ce       	rjmp	.-858    	; 0xdae <__stack+0x54f>
    1108:	5f cc       	rjmp	.-1858   	; 0x9c8 <__stack+0x169>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
    110a:	07 2d       	mov	r16, r7
    110c:	f6 cf       	rjmp	.-20     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
    110e:	06 2d       	mov	r16, r6
    1110:	f4 cf       	rjmp	.-24     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
    1112:	04 2d       	mov	r16, r4
    1114:	f2 cf       	rjmp	.-28     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    1116:	0e 2d       	mov	r16, r14
    1118:	f0 cf       	rjmp	.-32     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    111a:	02 e0       	ldi	r16, 0x02	; 2
    111c:	ee cf       	rjmp	.-36     	; 0x10fa <__stack+0x89b>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    111e:	0e 2d       	mov	r16, r14
    1120:	ec cf       	rjmp	.-40     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
    1122:	05 2d       	mov	r16, r5
    1124:	ea cf       	rjmp	.-44     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
    1126:	08 2d       	mov	r16, r8
    1128:	e8 cf       	rjmp	.-48     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    112a:	01 e0       	ldi	r16, 0x01	; 1
    112c:	e6 cf       	rjmp	.-52     	; 0x10fa <__stack+0x89b>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
    112e:	0a 2d       	mov	r16, r10
    1130:	e4 cf       	rjmp	.-56     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
    1132:	0b 2d       	mov	r16, r11
    1134:	e2 cf       	rjmp	.-60     	; 0x10fa <__stack+0x89b>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    1136:	02 e0       	ldi	r16, 0x02	; 2
    1138:	e0 cf       	rjmp	.-64     	; 0x10fa <__stack+0x89b>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    113a:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
    113e:	87 ec       	ldi	r24, 0xC7	; 199
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	e9 e6       	ldi	r30, 0x69	; 105
    114a:	f8 e1       	ldi	r31, 0x18	; 24
    114c:	91 50       	subi	r25, 0x01	; 1
    114e:	e0 40       	sbci	r30, 0x00	; 0
    1150:	f0 40       	sbci	r31, 0x00	; 0
    1152:	e1 f7       	brne	.-8      	; 0x114c <__stack+0x8ed>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <__stack+0x8f7>
    1156:	00 00       	nop
    1158:	d0 cf       	rjmp	.-96     	; 0x10fa <__stack+0x89b>

0000115a <__vector_10>:
		}//End of while that repeats the menu after each successful action till session timeout
	}// end of the main while(1)
}//end of main function

ISR(TIMER0_COMP_vect)
{
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	8f 93       	push	r24
    1166:	9f 93       	push	r25
	session_counter++;//increase the indicator of session time for every tick
    1168:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <session_counter>
    116c:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <session_counter+0x1>
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <session_counter+0x1>
    1176:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <session_counter>
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <ui8ComparePass>:

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
    1188:	44 23       	and	r20, r20
    118a:	d1 f0       	breq	.+52     	; 0x11c0 <ui8ComparePass+0x38>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
    118c:	fc 01       	movw	r30, r24
    118e:	30 81       	ld	r19, Z
    1190:	fb 01       	movw	r30, r22
    1192:	20 81       	ld	r18, Z
    1194:	32 13       	cpse	r19, r18
    1196:	16 c0       	rjmp	.+44     	; 0x11c4 <ui8ComparePass+0x3c>
    1198:	fc 01       	movw	r30, r24
    119a:	31 96       	adiw	r30, 0x01	; 1
    119c:	db 01       	movw	r26, r22
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	41 50       	subi	r20, 0x01	; 1
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	4f 5f       	subi	r20, 0xFF	; 255
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	48 0f       	add	r20, r24
    11aa:	59 1f       	adc	r21, r25
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <ui8ComparePass+0x2e>
    11ae:	21 91       	ld	r18, Z+
    11b0:	9d 91       	ld	r25, X+
    11b2:	29 13       	cpse	r18, r25
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <ui8ComparePass+0x40>

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
    11b6:	e4 17       	cp	r30, r20
    11b8:	f5 07       	cpc	r31, r21
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <ui8ComparePass+0x26>
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	08 95       	ret
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	08 95       	ret
    11c8:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
    11ca:	08 95       	ret

000011cc <u8GetKeyPressed>:
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
    11cc:	cf 93       	push	r28
    11ce:	c8 2f       	mov	r28, r24
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
	{
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
    11d0:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <session_counter>
    11d4:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <session_counter+0x1>
    11d8:	80 31       	cpi	r24, 0x10	; 16
    11da:	97 42       	sbci	r25, 0x27	; 39
    11dc:	10 f0       	brcs	.+4      	; 0x11e2 <u8GetKeyPressed+0x16>
    11de:	c1 30       	cpi	r28, 0x01	; 1
    11e0:	49 f0       	breq	.+18     	; 0x11f4 <u8GetKeyPressed+0x28>
    11e2:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <session_counter>
    11e6:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <session_counter+0x1>
    11ea:	80 31       	cpi	r24, 0x10	; 16
    11ec:	97 42       	sbci	r25, 0x27	; 39
    11ee:	38 f0       	brcs	.+14     	; 0x11fe <u8GetKeyPressed+0x32>
    11f0:	c2 30       	cpi	r28, 0x02	; 2
    11f2:	29 f4       	brne	.+10     	; 0x11fe <u8GetKeyPressed+0x32>
		{
			timeout_flag = TRUE;//set timeout flag to true
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__data_end>
			break;//break the loop that wait for input from the user
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <u8GetKeyPressed+0x3a>
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    11fe:	0e 94 b1 02 	call	0x562	; 0x562 <keypad_u8check_press>
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    1202:	8f 3f       	cpi	r24, 0xFF	; 255
    1204:	29 f3       	breq	.-54     	; 0x11d0 <u8GetKeyPressed+0x4>
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
	}
	return key_pressed;
    1206:	cf 91       	pop	r28
    1208:	08 95       	ret

0000120a <vMenuOption>:
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
    120a:	8f 92       	push	r8
    120c:	9f 92       	push	r9
    120e:	af 92       	push	r10
    1210:	bf 92       	push	r11
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	d8 2f       	mov	r29, r24
    1224:	e6 2e       	mov	r14, r22
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
	uint8 u8TurnOffCode = 0;//turn off the device or room
    1226:	00 e0       	ldi	r16, 0x00	; 0
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
    1228:	f1 2c       	mov	r15, r1
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
    122a:	10 e0       	ldi	r17, 0x00	; 0
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
    122c:	0f 2e       	mov	r0, r31
    122e:	f3 e1       	ldi	r31, 0x13	; 19
    1230:	8f 2e       	mov	r8, r31
    1232:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
    1234:	0f 2e       	mov	r0, r31
    1236:	f5 e1       	ldi	r31, 0x15	; 21
    1238:	9f 2e       	mov	r9, r31
    123a:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
    123c:	0f 2e       	mov	r0, r31
    123e:	f4 e1       	ldi	r31, 0x14	; 20
    1240:	af 2e       	mov	r10, r31
    1242:	f0 2d       	mov	r31, r0
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
    1244:	0f 2e       	mov	r0, r31
    1246:	f6 e1       	ldi	r31, 0x16	; 22
    1248:	bf 2e       	mov	r11, r31
    124a:	f0 2d       	mov	r31, r0
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
    124c:	0f 2e       	mov	r0, r31
    124e:	f1 e1       	ldi	r31, 0x11	; 17
    1250:	cf 2e       	mov	r12, r31
    1252:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
    1254:	0f 2e       	mov	r0, r31
    1256:	f2 e1       	ldi	r31, 0x12	; 18
    1258:	df 2e       	mov	r13, r31
    125a:	f0 2d       	mov	r31, r0
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	
	do
	{
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    125c:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
    1260:	d5 30       	cpi	r29, 0x05	; 5
    1262:	11 f1       	breq	.+68     	; 0x12a8 <vMenuOption+0x9e>
    1264:	28 f4       	brcc	.+10     	; 0x1270 <vMenuOption+0x66>
    1266:	d3 30       	cpi	r29, 0x03	; 3
    1268:	49 f0       	breq	.+18     	; 0x127c <vMenuOption+0x72>
    126a:	d4 30       	cpi	r29, 0x04	; 4
    126c:	91 f0       	breq	.+36     	; 0x1292 <vMenuOption+0x88>
    126e:	47 c0       	rjmp	.+142    	; 0x12fe <vMenuOption+0xf4>
    1270:	d7 30       	cpi	r29, 0x07	; 7
    1272:	81 f1       	breq	.+96     	; 0x12d4 <vMenuOption+0xca>
    1274:	20 f1       	brcs	.+72     	; 0x12be <vMenuOption+0xb4>
    1276:	d9 30       	cpi	r29, 0x09	; 9
    1278:	c1 f1       	breq	.+112    	; 0x12ea <vMenuOption+0xe0>
    127a:	41 c0       	rjmp	.+130    	; 0x12fe <vMenuOption+0xf4>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
    127c:	8a e3       	ldi	r24, 0x3A	; 58
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
    1284:	01 e3       	ldi	r16, 0x31	; 49
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
    1286:	0f 2e       	mov	r0, r31
    1288:	f1 e2       	ldi	r31, 0x21	; 33
    128a:	ff 2e       	mov	r15, r31
    128c:	f0 2d       	mov	r31, r0
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
    128e:	1c 2d       	mov	r17, r12
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
    1290:	36 c0       	rjmp	.+108    	; 0x12fe <vMenuOption+0xf4>
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
    1292:	83 e4       	ldi	r24, 0x43	; 67
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
    129a:	02 e3       	ldi	r16, 0x32	; 50
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
    129c:	0f 2e       	mov	r0, r31
    129e:	f2 e2       	ldi	r31, 0x22	; 34
    12a0:	ff 2e       	mov	r15, r31
    12a2:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
    12a4:	1d 2d       	mov	r17, r13
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
    12a6:	2b c0       	rjmp	.+86     	; 0x12fe <vMenuOption+0xf4>
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
    12a8:	8c e4       	ldi	r24, 0x4C	; 76
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
			LCD_vSend_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
    12b0:	03 e3       	ldi	r16, 0x33	; 51
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
    12b2:	0f 2e       	mov	r0, r31
    12b4:	f3 e2       	ldi	r31, 0x23	; 35
    12b6:	ff 2e       	mov	r15, r31
    12b8:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
    12ba:	18 2d       	mov	r17, r8
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
			break;
    12bc:	20 c0       	rjmp	.+64     	; 0x12fe <vMenuOption+0xf4>
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
    12be:	85 e5       	ldi	r24, 0x55	; 85
    12c0:	92 e0       	ldi	r25, 0x02	; 2
    12c2:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
			LCD_vSend_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
    12c6:	04 e3       	ldi	r16, 0x34	; 52
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
    12c8:	0f 2e       	mov	r0, r31
    12ca:	f4 e2       	ldi	r31, 0x24	; 36
    12cc:	ff 2e       	mov	r15, r31
    12ce:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
    12d0:	1a 2d       	mov	r17, r10
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
			break;
    12d2:	15 c0       	rjmp	.+42     	; 0x12fe <vMenuOption+0xf4>
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
    12d4:	8e e5       	ldi	r24, 0x5E	; 94
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
			LCD_vSend_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
    12dc:	05 e3       	ldi	r16, 0x35	; 53
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
    12de:	0f 2e       	mov	r0, r31
    12e0:	f5 e2       	ldi	r31, 0x25	; 37
    12e2:	ff 2e       	mov	r15, r31
    12e4:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
    12e6:	19 2d       	mov	r17, r9
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
    12e8:	0a c0       	rjmp	.+20     	; 0x12fe <vMenuOption+0xf4>
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
			LCD_vSend_string("Air Cond. S:");
    12ea:	84 e6       	ldi	r24, 0x64	; 100
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
			LCD_vSend_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
    12f2:	06 e3       	ldi	r16, 0x36	; 54
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
    12f4:	0f 2e       	mov	r0, r31
    12f6:	f6 e2       	ldi	r31, 0x26	; 38
    12f8:	ff 2e       	mov	r15, r31
    12fa:	f0 2d       	mov	r31, r0
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
    12fc:	1b 2d       	mov	r17, r11
			LCD_vSend_string("Air Cond. S:");
			break;
		}
		/****************************************************************************************************/
		
		SPI_ui8TransmitRecive(u8StatusCode);//demand the status from the slave
    12fe:	81 2f       	mov	r24, r17
    1300:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <SPI_ui8TransmitRecive>
    1304:	2f ef       	ldi	r18, 0xFF	; 255
    1306:	81 ee       	ldi	r24, 0xE1	; 225
    1308:	94 e0       	ldi	r25, 0x04	; 4
    130a:	21 50       	subi	r18, 0x01	; 1
    130c:	80 40       	sbci	r24, 0x00	; 0
    130e:	90 40       	sbci	r25, 0x00	; 0
    1310:	e1 f7       	brne	.-8      	; 0x130a <vMenuOption+0x100>
    1312:	00 c0       	rjmp	.+0      	; 0x1314 <vMenuOption+0x10a>
    1314:	00 00       	nop
		_delay_ms(100);//Halt the system for the given time in (ms)
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);//the master micro controller asks for the status
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <SPI_ui8TransmitRecive>
		if(response == ON_STATUS)//if the response from the slave was on status
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	29 f4       	brne	.+10     	; 0x132a <vMenuOption+0x120>
		{
			LCD_vSend_string("ON");//print the status on
    1320:	81 e7       	ldi	r24, 0x71	; 113
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <vMenuOption+0x128>
		}
		else//if the response from the slave was off status
		{
			LCD_vSend_string("OFF");//print the status off
    132a:	84 e7       	ldi	r24, 0x74	; 116
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
		}

		LCD_movecursor(2,1);//move the cursor to the start of the second line
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_movecursor>
		LCD_vSend_string("1-On 2-Off 0-RET");//print the sub menu
    133a:	88 e7       	ldi	r24, 0x78	; 120
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
		
		/*******************************************************************************/
		
		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
    1342:	8e 2d       	mov	r24, r14
    1344:	0e 94 e6 08 	call	0x11cc	; 0x11cc <u8GetKeyPressed>
    1348:	c8 2f       	mov	r28, r24
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	81 ee       	ldi	r24, 0xE1	; 225
    134e:	94 e0       	ldi	r25, 0x04	; 4
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	90 40       	sbci	r25, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <vMenuOption+0x146>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <vMenuOption+0x150>
    135a:	00 00       	nop
		_delay_ms(100);//to avoid the duplication of the pressed key
		
		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/
		
		if (key_pressed == '1')
    135c:	c1 33       	cpi	r28, 0x31	; 49
    135e:	21 f4       	brne	.+8      	; 0x1368 <vMenuOption+0x15e>
		{
			SPI_ui8TransmitRecive(u8TurnOnCode);//Send turn on signal from master to slave
    1360:	8f 2d       	mov	r24, r15
    1362:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <SPI_ui8TransmitRecive>
    1366:	21 c0       	rjmp	.+66     	; 0x13aa <vMenuOption+0x1a0>
		}
		else if (key_pressed == '2')
    1368:	c2 33       	cpi	r28, 0x32	; 50
    136a:	21 f4       	brne	.+8      	; 0x1374 <vMenuOption+0x16a>
		{
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
    136c:	80 2f       	mov	r24, r16
    136e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <SPI_ui8TransmitRecive>
    1372:	1b c0       	rjmp	.+54     	; 0x13aa <vMenuOption+0x1a0>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
    1374:	cf 3f       	cpi	r28, 0xFF	; 255
    1376:	a1 f0       	breq	.+40     	; 0x13a0 <vMenuOption+0x196>
    1378:	c0 33       	cpi	r28, 0x30	; 48
    137a:	b9 f0       	breq	.+46     	; 0x13aa <vMenuOption+0x1a0>
		{
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    137c:	0e 94 a7 03 	call	0x74e	; 0x74e <LCD_clearscreen>
			LCD_vSend_string("Wrong input");//print error message
    1380:	87 ec       	ldi	r24, 0xC7	; 199
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	0e 94 98 03 	call	0x730	; 0x730 <LCD_vSend_string>
    1388:	2f ef       	ldi	r18, 0xFF	; 255
    138a:	89 e6       	ldi	r24, 0x69	; 105
    138c:	98 e1       	ldi	r25, 0x18	; 24
    138e:	21 50       	subi	r18, 0x01	; 1
    1390:	80 40       	sbci	r24, 0x00	; 0
    1392:	90 40       	sbci	r25, 0x00	; 0
    1394:	e1 f7       	brne	.-8      	; 0x138e <vMenuOption+0x184>
    1396:	00 c0       	rjmp	.+0      	; 0x1398 <vMenuOption+0x18e>
    1398:	00 00       	nop
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
    139a:	c0 53       	subi	r28, 0x30	; 48
    139c:	c3 30       	cpi	r28, 0x03	; 3
    139e:	28 f0       	brcs	.+10     	; 0x13aa <vMenuOption+0x1a0>
    13a0:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
    13a4:	88 23       	and	r24, r24
    13a6:	09 f4       	brne	.+2      	; 0x13aa <vMenuOption+0x1a0>
    13a8:	59 cf       	rjmp	.-334    	; 0x125c <vMenuOption+0x52>
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	bf 90       	pop	r11
    13bc:	af 90       	pop	r10
    13be:	9f 90       	pop	r9
    13c0:	8f 90       	pop	r8
    13c2:	08 95       	ret

000013c4 <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
    13c4:	87 b3       	in	r24, 0x17	; 23
    13c6:	80 6b       	ori	r24, 0xB0	; 176
    13c8:	87 bb       	out	0x17, r24	; 23
    13ca:	8d b1       	in	r24, 0x0d	; 13
    13cc:	81 65       	ori	r24, 0x51	; 81
    13ce:	8d b9       	out	0x0d, r24	; 13
    13d0:	08 95       	ret

000013d2 <SPI_ui8TransmitRecive>:
}

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
    13d2:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    13d4:	77 9b       	sbis	0x0e, 7	; 14
    13d6:	fe cf       	rjmp	.-4      	; 0x13d4 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    13d8:	8f b1       	in	r24, 0x0f	; 15
    13da:	08 95       	ret

000013dc <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    13dc:	8e e4       	ldi	r24, 0x4E	; 78
    13de:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    13e0:	83 b7       	in	r24, 0x33	; 51
    13e2:	88 60       	ori	r24, 0x08	; 8
    13e4:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
    13e6:	83 b7       	in	r24, 0x33	; 51
    13e8:	8f 7b       	andi	r24, 0xBF	; 191
    13ea:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    13ec:	83 b7       	in	r24, 0x33	; 51
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
    13f2:	83 b7       	in	r24, 0x33	; 51
    13f4:	8d 7f       	andi	r24, 0xFD	; 253
    13f6:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
    13f8:	83 b7       	in	r24, 0x33	; 51
    13fa:	84 60       	ori	r24, 0x04	; 4
    13fc:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
    13fe:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    1400:	89 b7       	in	r24, 0x39	; 57
    1402:	82 60       	ori	r24, 0x02	; 2
    1404:	89 bf       	out	0x39, r24	; 57
    1406:	08 95       	ret

00001408 <timer0_stop>:
}

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    1408:	83 b7       	in	r24, 0x33	; 51
    140a:	8e 7f       	andi	r24, 0xFE	; 254
    140c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
    140e:	83 b7       	in	r24, 0x33	; 51
    1410:	8d 7f       	andi	r24, 0xFD	; 253
    1412:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
    1414:	83 b7       	in	r24, 0x33	; 51
    1416:	8b 7f       	andi	r24, 0xFB	; 251
    1418:	83 bf       	out	0x33, r24	; 51
    141a:	08 95       	ret

0000141c <__tablejump2__>:
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	05 90       	lpm	r0, Z+
    1422:	f4 91       	lpm	r31, Z
    1424:	e0 2d       	mov	r30, r0
    1426:	09 94       	ijmp

00001428 <_exit>:
    1428:	f8 94       	cli

0000142a <__stop_program>:
    142a:	ff cf       	rjmp	.-2      	; 0x142a <__stop_program>
